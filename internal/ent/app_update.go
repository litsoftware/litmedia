// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/litsoftware/litmedia/internal/ent/app"
	"github.com/litsoftware/litmedia/internal/ent/predicate"
)

// AppUpdate is the builder for updating App entities.
type AppUpdate struct {
	config
	hooks    []Hook
	mutation *AppMutation
}

// Where appends a list predicates to the AppUpdate builder.
func (au *AppUpdate) Where(ps ...predicate.App) *AppUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AppUpdate) SetUpdatedAt(t time.Time) *AppUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AppUpdate) ClearUpdatedAt() *AppUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetDeleteAt sets the "delete_at" field.
func (au *AppUpdate) SetDeleteAt(t time.Time) *AppUpdate {
	au.mutation.SetDeleteAt(t)
	return au
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (au *AppUpdate) SetNillableDeleteAt(t *time.Time) *AppUpdate {
	if t != nil {
		au.SetDeleteAt(*t)
	}
	return au
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (au *AppUpdate) ClearDeleteAt() *AppUpdate {
	au.mutation.ClearDeleteAt()
	return au
}

// SetOperatorID sets the "operator_id" field.
func (au *AppUpdate) SetOperatorID(i int) *AppUpdate {
	au.mutation.ResetOperatorID()
	au.mutation.SetOperatorID(i)
	return au
}

// SetNillableOperatorID sets the "operator_id" field if the given value is not nil.
func (au *AppUpdate) SetNillableOperatorID(i *int) *AppUpdate {
	if i != nil {
		au.SetOperatorID(*i)
	}
	return au
}

// AddOperatorID adds i to the "operator_id" field.
func (au *AppUpdate) AddOperatorID(i int) *AppUpdate {
	au.mutation.AddOperatorID(i)
	return au
}

// ClearOperatorID clears the value of the "operator_id" field.
func (au *AppUpdate) ClearOperatorID() *AppUpdate {
	au.mutation.ClearOperatorID()
	return au
}

// SetEncryptedOperatorRsaPublicKey sets the "encrypted_operator_rsa_public_key" field.
func (au *AppUpdate) SetEncryptedOperatorRsaPublicKey(s string) *AppUpdate {
	au.mutation.SetEncryptedOperatorRsaPublicKey(s)
	return au
}

// SetNillableEncryptedOperatorRsaPublicKey sets the "encrypted_operator_rsa_public_key" field if the given value is not nil.
func (au *AppUpdate) SetNillableEncryptedOperatorRsaPublicKey(s *string) *AppUpdate {
	if s != nil {
		au.SetEncryptedOperatorRsaPublicKey(*s)
	}
	return au
}

// ClearEncryptedOperatorRsaPublicKey clears the value of the "encrypted_operator_rsa_public_key" field.
func (au *AppUpdate) ClearEncryptedOperatorRsaPublicKey() *AppUpdate {
	au.mutation.ClearEncryptedOperatorRsaPublicKey()
	return au
}

// SetEncryptedAppPrivateKey sets the "encrypted_app_private_key" field.
func (au *AppUpdate) SetEncryptedAppPrivateKey(s string) *AppUpdate {
	au.mutation.SetEncryptedAppPrivateKey(s)
	return au
}

// SetNillableEncryptedAppPrivateKey sets the "encrypted_app_private_key" field if the given value is not nil.
func (au *AppUpdate) SetNillableEncryptedAppPrivateKey(s *string) *AppUpdate {
	if s != nil {
		au.SetEncryptedAppPrivateKey(*s)
	}
	return au
}

// ClearEncryptedAppPrivateKey clears the value of the "encrypted_app_private_key" field.
func (au *AppUpdate) ClearEncryptedAppPrivateKey() *AppUpdate {
	au.mutation.ClearEncryptedAppPrivateKey()
	return au
}

// SetEncryptedAppPublicKey sets the "encrypted_app_public_key" field.
func (au *AppUpdate) SetEncryptedAppPublicKey(s string) *AppUpdate {
	au.mutation.SetEncryptedAppPublicKey(s)
	return au
}

// SetNillableEncryptedAppPublicKey sets the "encrypted_app_public_key" field if the given value is not nil.
func (au *AppUpdate) SetNillableEncryptedAppPublicKey(s *string) *AppUpdate {
	if s != nil {
		au.SetEncryptedAppPublicKey(*s)
	}
	return au
}

// ClearEncryptedAppPublicKey clears the value of the "encrypted_app_public_key" field.
func (au *AppUpdate) ClearEncryptedAppPublicKey() *AppUpdate {
	au.mutation.ClearEncryptedAppPublicKey()
	return au
}

// SetTitle sets the "title" field.
func (au *AppUpdate) SetTitle(s string) *AppUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *AppUpdate) SetNillableTitle(s *string) *AppUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// ClearTitle clears the value of the "title" field.
func (au *AppUpdate) ClearTitle() *AppUpdate {
	au.mutation.ClearTitle()
	return au
}

// SetDescription sets the "description" field.
func (au *AppUpdate) SetDescription(s string) *AppUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AppUpdate) SetNillableDescription(s *string) *AppUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AppUpdate) ClearDescription() *AppUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetConf sets the "conf" field.
func (au *AppUpdate) SetConf(s string) *AppUpdate {
	au.mutation.SetConf(s)
	return au
}

// SetNillableConf sets the "conf" field if the given value is not nil.
func (au *AppUpdate) SetNillableConf(s *string) *AppUpdate {
	if s != nil {
		au.SetConf(*s)
	}
	return au
}

// ClearConf clears the value of the "conf" field.
func (au *AppUpdate) ClearConf() *AppUpdate {
	au.mutation.ClearConf()
	return au
}

// SetAppID sets the "app_id" field.
func (au *AppUpdate) SetAppID(s string) *AppUpdate {
	au.mutation.SetAppID(s)
	return au
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (au *AppUpdate) SetNillableAppID(s *string) *AppUpdate {
	if s != nil {
		au.SetAppID(*s)
	}
	return au
}

// ClearAppID clears the value of the "app_id" field.
func (au *AppUpdate) ClearAppID() *AppUpdate {
	au.mutation.ClearAppID()
	return au
}

// SetAppSecret sets the "app_secret" field.
func (au *AppUpdate) SetAppSecret(s string) *AppUpdate {
	au.mutation.SetAppSecret(s)
	return au
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (au *AppUpdate) SetNillableAppSecret(s *string) *AppUpdate {
	if s != nil {
		au.SetAppSecret(*s)
	}
	return au
}

// ClearAppSecret clears the value of the "app_secret" field.
func (au *AppUpdate) ClearAppSecret() *AppUpdate {
	au.mutation.ClearAppSecret()
	return au
}

// SetStatus sets the "status" field.
func (au *AppUpdate) SetStatus(i int) *AppUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(i)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AppUpdate) SetNillableStatus(i *int) *AppUpdate {
	if i != nil {
		au.SetStatus(*i)
	}
	return au
}

// AddStatus adds i to the "status" field.
func (au *AppUpdate) AddStatus(i int) *AppUpdate {
	au.mutation.AddStatus(i)
	return au
}

// ClearStatus clears the value of the "status" field.
func (au *AppUpdate) ClearStatus() *AppUpdate {
	au.mutation.ClearStatus()
	return au
}

// SetIPWhitelist sets the "ip_whitelist" field.
func (au *AppUpdate) SetIPWhitelist(m []map[string]interface{}) *AppUpdate {
	au.mutation.SetIPWhitelist(m)
	return au
}

// ClearIPWhitelist clears the value of the "ip_whitelist" field.
func (au *AppUpdate) ClearIPWhitelist() *AppUpdate {
	au.mutation.ClearIPWhitelist()
	return au
}

// Mutation returns the AppMutation object of the builder.
func (au *AppUpdate) Mutation() *AppMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AppUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok && !au.mutation.UpdatedAtCleared() {
		v := app.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: app.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if au.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: app.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldUpdatedAt,
		})
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: app.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldDeleteAt,
		})
	}
	if au.mutation.DeleteAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: app.FieldDeleteAt,
		})
	}
	if value, ok := au.mutation.OperatorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldOperatorID,
		})
	}
	if value, ok := au.mutation.AddedOperatorID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldOperatorID,
		})
	}
	if au.mutation.OperatorIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: app.FieldOperatorID,
		})
	}
	if value, ok := au.mutation.EncryptedOperatorRsaPublicKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldEncryptedOperatorRsaPublicKey,
		})
	}
	if au.mutation.EncryptedOperatorRsaPublicKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldEncryptedOperatorRsaPublicKey,
		})
	}
	if value, ok := au.mutation.EncryptedAppPrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldEncryptedAppPrivateKey,
		})
	}
	if au.mutation.EncryptedAppPrivateKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldEncryptedAppPrivateKey,
		})
	}
	if value, ok := au.mutation.EncryptedAppPublicKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldEncryptedAppPublicKey,
		})
	}
	if au.mutation.EncryptedAppPublicKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldEncryptedAppPublicKey,
		})
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldTitle,
		})
	}
	if au.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldTitle,
		})
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldDescription,
		})
	}
	if au.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldDescription,
		})
	}
	if value, ok := au.mutation.Conf(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldConf,
		})
	}
	if au.mutation.ConfCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldConf,
		})
	}
	if value, ok := au.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppID,
		})
	}
	if au.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldAppID,
		})
	}
	if value, ok := au.mutation.AppSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppSecret,
		})
	}
	if au.mutation.AppSecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldAppSecret,
		})
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldStatus,
		})
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldStatus,
		})
	}
	if au.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: app.FieldStatus,
		})
	}
	if value, ok := au.mutation.IPWhitelist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: app.FieldIPWhitelist,
		})
	}
	if au.mutation.IPWhitelistCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: app.FieldIPWhitelist,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppUpdateOne is the builder for updating a single App entity.
type AppUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AppUpdateOne) SetUpdatedAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AppUpdateOne) ClearUpdatedAt() *AppUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetDeleteAt sets the "delete_at" field.
func (auo *AppUpdateOne) SetDeleteAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetDeleteAt(t)
	return auo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableDeleteAt(t *time.Time) *AppUpdateOne {
	if t != nil {
		auo.SetDeleteAt(*t)
	}
	return auo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (auo *AppUpdateOne) ClearDeleteAt() *AppUpdateOne {
	auo.mutation.ClearDeleteAt()
	return auo
}

// SetOperatorID sets the "operator_id" field.
func (auo *AppUpdateOne) SetOperatorID(i int) *AppUpdateOne {
	auo.mutation.ResetOperatorID()
	auo.mutation.SetOperatorID(i)
	return auo
}

// SetNillableOperatorID sets the "operator_id" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableOperatorID(i *int) *AppUpdateOne {
	if i != nil {
		auo.SetOperatorID(*i)
	}
	return auo
}

// AddOperatorID adds i to the "operator_id" field.
func (auo *AppUpdateOne) AddOperatorID(i int) *AppUpdateOne {
	auo.mutation.AddOperatorID(i)
	return auo
}

// ClearOperatorID clears the value of the "operator_id" field.
func (auo *AppUpdateOne) ClearOperatorID() *AppUpdateOne {
	auo.mutation.ClearOperatorID()
	return auo
}

// SetEncryptedOperatorRsaPublicKey sets the "encrypted_operator_rsa_public_key" field.
func (auo *AppUpdateOne) SetEncryptedOperatorRsaPublicKey(s string) *AppUpdateOne {
	auo.mutation.SetEncryptedOperatorRsaPublicKey(s)
	return auo
}

// SetNillableEncryptedOperatorRsaPublicKey sets the "encrypted_operator_rsa_public_key" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableEncryptedOperatorRsaPublicKey(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetEncryptedOperatorRsaPublicKey(*s)
	}
	return auo
}

// ClearEncryptedOperatorRsaPublicKey clears the value of the "encrypted_operator_rsa_public_key" field.
func (auo *AppUpdateOne) ClearEncryptedOperatorRsaPublicKey() *AppUpdateOne {
	auo.mutation.ClearEncryptedOperatorRsaPublicKey()
	return auo
}

// SetEncryptedAppPrivateKey sets the "encrypted_app_private_key" field.
func (auo *AppUpdateOne) SetEncryptedAppPrivateKey(s string) *AppUpdateOne {
	auo.mutation.SetEncryptedAppPrivateKey(s)
	return auo
}

// SetNillableEncryptedAppPrivateKey sets the "encrypted_app_private_key" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableEncryptedAppPrivateKey(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetEncryptedAppPrivateKey(*s)
	}
	return auo
}

// ClearEncryptedAppPrivateKey clears the value of the "encrypted_app_private_key" field.
func (auo *AppUpdateOne) ClearEncryptedAppPrivateKey() *AppUpdateOne {
	auo.mutation.ClearEncryptedAppPrivateKey()
	return auo
}

// SetEncryptedAppPublicKey sets the "encrypted_app_public_key" field.
func (auo *AppUpdateOne) SetEncryptedAppPublicKey(s string) *AppUpdateOne {
	auo.mutation.SetEncryptedAppPublicKey(s)
	return auo
}

// SetNillableEncryptedAppPublicKey sets the "encrypted_app_public_key" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableEncryptedAppPublicKey(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetEncryptedAppPublicKey(*s)
	}
	return auo
}

// ClearEncryptedAppPublicKey clears the value of the "encrypted_app_public_key" field.
func (auo *AppUpdateOne) ClearEncryptedAppPublicKey() *AppUpdateOne {
	auo.mutation.ClearEncryptedAppPublicKey()
	return auo
}

// SetTitle sets the "title" field.
func (auo *AppUpdateOne) SetTitle(s string) *AppUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableTitle(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// ClearTitle clears the value of the "title" field.
func (auo *AppUpdateOne) ClearTitle() *AppUpdateOne {
	auo.mutation.ClearTitle()
	return auo
}

// SetDescription sets the "description" field.
func (auo *AppUpdateOne) SetDescription(s string) *AppUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableDescription(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AppUpdateOne) ClearDescription() *AppUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetConf sets the "conf" field.
func (auo *AppUpdateOne) SetConf(s string) *AppUpdateOne {
	auo.mutation.SetConf(s)
	return auo
}

// SetNillableConf sets the "conf" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableConf(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetConf(*s)
	}
	return auo
}

// ClearConf clears the value of the "conf" field.
func (auo *AppUpdateOne) ClearConf() *AppUpdateOne {
	auo.mutation.ClearConf()
	return auo
}

// SetAppID sets the "app_id" field.
func (auo *AppUpdateOne) SetAppID(s string) *AppUpdateOne {
	auo.mutation.SetAppID(s)
	return auo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableAppID(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetAppID(*s)
	}
	return auo
}

// ClearAppID clears the value of the "app_id" field.
func (auo *AppUpdateOne) ClearAppID() *AppUpdateOne {
	auo.mutation.ClearAppID()
	return auo
}

// SetAppSecret sets the "app_secret" field.
func (auo *AppUpdateOne) SetAppSecret(s string) *AppUpdateOne {
	auo.mutation.SetAppSecret(s)
	return auo
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableAppSecret(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetAppSecret(*s)
	}
	return auo
}

// ClearAppSecret clears the value of the "app_secret" field.
func (auo *AppUpdateOne) ClearAppSecret() *AppUpdateOne {
	auo.mutation.ClearAppSecret()
	return auo
}

// SetStatus sets the "status" field.
func (auo *AppUpdateOne) SetStatus(i int) *AppUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(i)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableStatus(i *int) *AppUpdateOne {
	if i != nil {
		auo.SetStatus(*i)
	}
	return auo
}

// AddStatus adds i to the "status" field.
func (auo *AppUpdateOne) AddStatus(i int) *AppUpdateOne {
	auo.mutation.AddStatus(i)
	return auo
}

// ClearStatus clears the value of the "status" field.
func (auo *AppUpdateOne) ClearStatus() *AppUpdateOne {
	auo.mutation.ClearStatus()
	return auo
}

// SetIPWhitelist sets the "ip_whitelist" field.
func (auo *AppUpdateOne) SetIPWhitelist(m []map[string]interface{}) *AppUpdateOne {
	auo.mutation.SetIPWhitelist(m)
	return auo
}

// ClearIPWhitelist clears the value of the "ip_whitelist" field.
func (auo *AppUpdateOne) ClearIPWhitelist() *AppUpdateOne {
	auo.mutation.ClearIPWhitelist()
	return auo
}

// Mutation returns the AppMutation object of the builder.
func (auo *AppUpdateOne) Mutation() *AppMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppUpdateOne) Select(field string, fields ...string) *AppUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated App entity.
func (auo *AppUpdateOne) Save(ctx context.Context) (*App, error) {
	var (
		err  error
		node *App
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppUpdateOne) SaveX(ctx context.Context) *App {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AppUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok && !auo.mutation.UpdatedAtCleared() {
		v := app.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AppUpdateOne) sqlSave(ctx context.Context) (_node *App, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: app.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "App.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, app.FieldID)
		for _, f := range fields {
			if !app.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != app.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: app.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldUpdatedAt,
		})
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: app.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldDeleteAt,
		})
	}
	if auo.mutation.DeleteAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: app.FieldDeleteAt,
		})
	}
	if value, ok := auo.mutation.OperatorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldOperatorID,
		})
	}
	if value, ok := auo.mutation.AddedOperatorID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldOperatorID,
		})
	}
	if auo.mutation.OperatorIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: app.FieldOperatorID,
		})
	}
	if value, ok := auo.mutation.EncryptedOperatorRsaPublicKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldEncryptedOperatorRsaPublicKey,
		})
	}
	if auo.mutation.EncryptedOperatorRsaPublicKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldEncryptedOperatorRsaPublicKey,
		})
	}
	if value, ok := auo.mutation.EncryptedAppPrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldEncryptedAppPrivateKey,
		})
	}
	if auo.mutation.EncryptedAppPrivateKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldEncryptedAppPrivateKey,
		})
	}
	if value, ok := auo.mutation.EncryptedAppPublicKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldEncryptedAppPublicKey,
		})
	}
	if auo.mutation.EncryptedAppPublicKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldEncryptedAppPublicKey,
		})
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldTitle,
		})
	}
	if auo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldTitle,
		})
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldDescription,
		})
	}
	if auo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldDescription,
		})
	}
	if value, ok := auo.mutation.Conf(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldConf,
		})
	}
	if auo.mutation.ConfCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldConf,
		})
	}
	if value, ok := auo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppID,
		})
	}
	if auo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldAppID,
		})
	}
	if value, ok := auo.mutation.AppSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppSecret,
		})
	}
	if auo.mutation.AppSecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldAppSecret,
		})
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldStatus,
		})
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldStatus,
		})
	}
	if auo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: app.FieldStatus,
		})
	}
	if value, ok := auo.mutation.IPWhitelist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: app.FieldIPWhitelist,
		})
	}
	if auo.mutation.IPWhitelistCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: app.FieldIPWhitelist,
		})
	}
	_node = &App{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
