// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/litsoftware/litmedia/internal/ent/media"
	"github.com/litsoftware/litmedia/internal/ent/schema"
)

// Media is the model entity for the Media schema.
type Media struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt time.Time `json:"delete_at,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// UserID holds the value of the "user_id" field.
	// 本系统用户id
	UserID int `json:"user_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID int `json:"app_id,omitempty"`
	// Sn holds the value of the "sn" field.
	Sn string `json:"sn,omitempty"`
	// OrgFileName holds the value of the "org_file_name" field.
	// 原始文件名
	OrgFileName string `json:"org_file_name,omitempty"`
	// FileName holds the value of the "file_name" field.
	// 保存的文件名称
	FileName string `json:"file_name,omitempty"`
	// Size holds the value of the "size" field.
	// 尺寸信息
	Size schema.MediaSize `json:"size,omitempty"`
	// Mime holds the value of the "mime" field.
	// 文件mime
	Mime string `json:"mime,omitempty"`
	// Ext holds the value of the "ext" field.
	// 扩展名
	Ext string `json:"ext,omitempty"`
	// RefCount holds the value of the "ref_count" field.
	// 引用计数
	RefCount int `json:"ref_count,omitempty"`
	// Level holds the value of the "level" field.
	// 资源的级别 普通， 敏感资料
	Level int `json:"level,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// ReasonType holds the value of the "reason_type" field.
	ReasonType int `json:"reason_type,omitempty"`
	// SavePath holds the value of the "save_path" field.
	// 保存路径
	SavePath string `json:"save_path,omitempty"`
	// FullPath holds the value of the "full_path" field.
	FullPath string `json:"full_path,omitempty"`
	// IsEncrypted holds the value of the "is_encrypted" field.
	IsEncrypted bool `json:"is_encrypted,omitempty"`
	// Reason holds the value of the "reason" field.
	// 图片被强制操作或审核失败的理由/原因
	Reason string `json:"reason,omitempty"`
	// OutUserID holds the value of the "out_user_id" field.
	// 外部用户id
	OutUserID int64 `json:"out_user_id,omitempty"`
	// CompanyID holds the value of the "company_id" field.
	// 公司id
	CompanyID int64 `json:"company_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Media) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case media.FieldSize:
			values[i] = new([]byte)
		case media.FieldIsEncrypted:
			values[i] = new(sql.NullBool)
		case media.FieldID, media.FieldUserID, media.FieldAppID, media.FieldRefCount, media.FieldLevel, media.FieldType, media.FieldStatus, media.FieldReasonType, media.FieldOutUserID, media.FieldCompanyID:
			values[i] = new(sql.NullInt64)
		case media.FieldHash, media.FieldSn, media.FieldOrgFileName, media.FieldFileName, media.FieldMime, media.FieldExt, media.FieldSavePath, media.FieldFullPath, media.FieldReason:
			values[i] = new(sql.NullString)
		case media.FieldCreatedAt, media.FieldUpdatedAt, media.FieldDeleteAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Media", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Media fields.
func (m *Media) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case media.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case media.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case media.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case media.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				m.DeleteAt = value.Time
			}
		case media.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				m.Hash = value.String
			}
		case media.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				m.UserID = int(value.Int64)
			}
		case media.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				m.AppID = int(value.Int64)
			}
		case media.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				m.Sn = value.String
			}
		case media.FieldOrgFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_file_name", values[i])
			} else if value.Valid {
				m.OrgFileName = value.String
			}
		case media.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_name", values[i])
			} else if value.Valid {
				m.FileName = value.String
			}
		case media.FieldSize:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Size); err != nil {
					return fmt.Errorf("unmarshal field size: %w", err)
				}
			}
		case media.FieldMime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mime", values[i])
			} else if value.Valid {
				m.Mime = value.String
			}
		case media.FieldExt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ext", values[i])
			} else if value.Valid {
				m.Ext = value.String
			}
		case media.FieldRefCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ref_count", values[i])
			} else if value.Valid {
				m.RefCount = int(value.Int64)
			}
		case media.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				m.Level = int(value.Int64)
			}
		case media.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				m.Type = int(value.Int64)
			}
		case media.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				m.Status = int(value.Int64)
			}
		case media.FieldReasonType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reason_type", values[i])
			} else if value.Valid {
				m.ReasonType = int(value.Int64)
			}
		case media.FieldSavePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field save_path", values[i])
			} else if value.Valid {
				m.SavePath = value.String
			}
		case media.FieldFullPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_path", values[i])
			} else if value.Valid {
				m.FullPath = value.String
			}
		case media.FieldIsEncrypted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_encrypted", values[i])
			} else if value.Valid {
				m.IsEncrypted = value.Bool
			}
		case media.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				m.Reason = value.String
			}
		case media.FieldOutUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field out_user_id", values[i])
			} else if value.Valid {
				m.OutUserID = value.Int64
			}
		case media.FieldCompanyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field company_id", values[i])
			} else if value.Valid {
				m.CompanyID = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Media.
// Note that you need to call Media.Unwrap() before calling this method if this Media
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Media) Update() *MediaUpdateOne {
	return (&MediaClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Media entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Media) Unwrap() *Media {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Media is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Media) String() string {
	var builder strings.Builder
	builder.WriteString("Media(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", delete_at=")
	builder.WriteString(m.DeleteAt.Format(time.ANSIC))
	builder.WriteString(", hash=")
	builder.WriteString(m.Hash)
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", m.UserID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", m.AppID))
	builder.WriteString(", sn=")
	builder.WriteString(m.Sn)
	builder.WriteString(", org_file_name=")
	builder.WriteString(m.OrgFileName)
	builder.WriteString(", file_name=")
	builder.WriteString(m.FileName)
	builder.WriteString(", size=")
	builder.WriteString(fmt.Sprintf("%v", m.Size))
	builder.WriteString(", mime=")
	builder.WriteString(m.Mime)
	builder.WriteString(", ext=")
	builder.WriteString(m.Ext)
	builder.WriteString(", ref_count=")
	builder.WriteString(fmt.Sprintf("%v", m.RefCount))
	builder.WriteString(", level=")
	builder.WriteString(fmt.Sprintf("%v", m.Level))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", m.Type))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", m.Status))
	builder.WriteString(", reason_type=")
	builder.WriteString(fmt.Sprintf("%v", m.ReasonType))
	builder.WriteString(", save_path=")
	builder.WriteString(m.SavePath)
	builder.WriteString(", full_path=")
	builder.WriteString(m.FullPath)
	builder.WriteString(", is_encrypted=")
	builder.WriteString(fmt.Sprintf("%v", m.IsEncrypted))
	builder.WriteString(", reason=")
	builder.WriteString(m.Reason)
	builder.WriteString(", out_user_id=")
	builder.WriteString(fmt.Sprintf("%v", m.OutUserID))
	builder.WriteString(", company_id=")
	builder.WriteString(fmt.Sprintf("%v", m.CompanyID))
	builder.WriteByte(')')
	return builder.String()
}

// MediaSlice is a parsable slice of Media.
type MediaSlice []*Media

func (m MediaSlice) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
