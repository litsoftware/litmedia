// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/litsoftware/litmedia/internal/ent/operator"
)

// OperatorCreate is the builder for creating a Operator entity.
type OperatorCreate struct {
	config
	mutation *OperatorMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (oc *OperatorCreate) SetCreatedAt(t time.Time) *OperatorCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OperatorCreate) SetNillableCreatedAt(t *time.Time) *OperatorCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OperatorCreate) SetUpdatedAt(t time.Time) *OperatorCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OperatorCreate) SetNillableUpdatedAt(t *time.Time) *OperatorCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetDeleteAt sets the "delete_at" field.
func (oc *OperatorCreate) SetDeleteAt(t time.Time) *OperatorCreate {
	oc.mutation.SetDeleteAt(t)
	return oc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (oc *OperatorCreate) SetNillableDeleteAt(t *time.Time) *OperatorCreate {
	if t != nil {
		oc.SetDeleteAt(*t)
	}
	return oc
}

// SetName sets the "name" field.
func (oc *OperatorCreate) SetName(s string) *OperatorCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oc *OperatorCreate) SetNillableName(s *string) *OperatorCreate {
	if s != nil {
		oc.SetName(*s)
	}
	return oc
}

// SetEmail sets the "email" field.
func (oc *OperatorCreate) SetEmail(s string) *OperatorCreate {
	oc.mutation.SetEmail(s)
	return oc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (oc *OperatorCreate) SetNillableEmail(s *string) *OperatorCreate {
	if s != nil {
		oc.SetEmail(*s)
	}
	return oc
}

// SetPassword sets the "password" field.
func (oc *OperatorCreate) SetPassword(s string) *OperatorCreate {
	oc.mutation.SetPassword(s)
	return oc
}

// SetNickname sets the "nickname" field.
func (oc *OperatorCreate) SetNickname(s string) *OperatorCreate {
	oc.mutation.SetNickname(s)
	return oc
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (oc *OperatorCreate) SetNillableNickname(s *string) *OperatorCreate {
	if s != nil {
		oc.SetNickname(*s)
	}
	return oc
}

// SetPhone sets the "phone" field.
func (oc *OperatorCreate) SetPhone(s string) *OperatorCreate {
	oc.mutation.SetPhone(s)
	return oc
}

// SetAvatar sets the "avatar" field.
func (oc *OperatorCreate) SetAvatar(s string) *OperatorCreate {
	oc.mutation.SetAvatar(s)
	return oc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (oc *OperatorCreate) SetNillableAvatar(s *string) *OperatorCreate {
	if s != nil {
		oc.SetAvatar(*s)
	}
	return oc
}

// SetRememberToken sets the "remember_token" field.
func (oc *OperatorCreate) SetRememberToken(s string) *OperatorCreate {
	oc.mutation.SetRememberToken(s)
	return oc
}

// SetNillableRememberToken sets the "remember_token" field if the given value is not nil.
func (oc *OperatorCreate) SetNillableRememberToken(s *string) *OperatorCreate {
	if s != nil {
		oc.SetRememberToken(*s)
	}
	return oc
}

// Mutation returns the OperatorMutation object of the builder.
func (oc *OperatorCreate) Mutation() *OperatorMutation {
	return oc.mutation
}

// Save creates the Operator in the database.
func (oc *OperatorCreate) Save(ctx context.Context) (*Operator, error) {
	var (
		err  error
		node *Operator
	)
	oc.defaults()
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OperatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			if node, err = oc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			if oc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OperatorCreate) SaveX(ctx context.Context) *Operator {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OperatorCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OperatorCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OperatorCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := operator.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := operator.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OperatorCreate) check() error {
	if _, ok := oc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Operator.password"`)}
	}
	if _, ok := oc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Operator.phone"`)}
	}
	return nil
}

func (oc *OperatorCreate) sqlSave(ctx context.Context) (*Operator, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oc *OperatorCreate) createSpec() (*Operator, *sqlgraph.CreateSpec) {
	var (
		_node = &Operator{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: operator.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: operator.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: operator.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: operator.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: operator.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	if value, ok := oc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operator.FieldName,
		})
		_node.Name = value
	}
	if value, ok := oc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operator.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := oc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operator.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := oc.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operator.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := oc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operator.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := oc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operator.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := oc.mutation.RememberToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operator.FieldRememberToken,
		})
		_node.RememberToken = value
	}
	return _node, _spec
}

// OperatorCreateBulk is the builder for creating many Operator entities in bulk.
type OperatorCreateBulk struct {
	config
	builders []*OperatorCreate
}

// Save creates the Operator entities in the database.
func (ocb *OperatorCreateBulk) Save(ctx context.Context) ([]*Operator, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Operator, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OperatorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OperatorCreateBulk) SaveX(ctx context.Context) []*Operator {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OperatorCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OperatorCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
