// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/litsoftware/litmedia/internal/ent/app"
)

// AppCreate is the builder for creating a App entity.
type AppCreate struct {
	config
	mutation *AppMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *AppCreate) SetCreatedAt(t time.Time) *AppCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AppCreate) SetNillableCreatedAt(t *time.Time) *AppCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AppCreate) SetUpdatedAt(t time.Time) *AppCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AppCreate) SetNillableUpdatedAt(t *time.Time) *AppCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeleteAt sets the "delete_at" field.
func (ac *AppCreate) SetDeleteAt(t time.Time) *AppCreate {
	ac.mutation.SetDeleteAt(t)
	return ac
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ac *AppCreate) SetNillableDeleteAt(t *time.Time) *AppCreate {
	if t != nil {
		ac.SetDeleteAt(*t)
	}
	return ac
}

// SetOperatorID sets the "operator_id" field.
func (ac *AppCreate) SetOperatorID(i int) *AppCreate {
	ac.mutation.SetOperatorID(i)
	return ac
}

// SetNillableOperatorID sets the "operator_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableOperatorID(i *int) *AppCreate {
	if i != nil {
		ac.SetOperatorID(*i)
	}
	return ac
}

// SetEncryptedOperatorRsaPublicKey sets the "encrypted_operator_rsa_public_key" field.
func (ac *AppCreate) SetEncryptedOperatorRsaPublicKey(s string) *AppCreate {
	ac.mutation.SetEncryptedOperatorRsaPublicKey(s)
	return ac
}

// SetNillableEncryptedOperatorRsaPublicKey sets the "encrypted_operator_rsa_public_key" field if the given value is not nil.
func (ac *AppCreate) SetNillableEncryptedOperatorRsaPublicKey(s *string) *AppCreate {
	if s != nil {
		ac.SetEncryptedOperatorRsaPublicKey(*s)
	}
	return ac
}

// SetEncryptedAppPrivateKey sets the "encrypted_app_private_key" field.
func (ac *AppCreate) SetEncryptedAppPrivateKey(s string) *AppCreate {
	ac.mutation.SetEncryptedAppPrivateKey(s)
	return ac
}

// SetNillableEncryptedAppPrivateKey sets the "encrypted_app_private_key" field if the given value is not nil.
func (ac *AppCreate) SetNillableEncryptedAppPrivateKey(s *string) *AppCreate {
	if s != nil {
		ac.SetEncryptedAppPrivateKey(*s)
	}
	return ac
}

// SetEncryptedAppPublicKey sets the "encrypted_app_public_key" field.
func (ac *AppCreate) SetEncryptedAppPublicKey(s string) *AppCreate {
	ac.mutation.SetEncryptedAppPublicKey(s)
	return ac
}

// SetNillableEncryptedAppPublicKey sets the "encrypted_app_public_key" field if the given value is not nil.
func (ac *AppCreate) SetNillableEncryptedAppPublicKey(s *string) *AppCreate {
	if s != nil {
		ac.SetEncryptedAppPublicKey(*s)
	}
	return ac
}

// SetTitle sets the "title" field.
func (ac *AppCreate) SetTitle(s string) *AppCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ac *AppCreate) SetNillableTitle(s *string) *AppCreate {
	if s != nil {
		ac.SetTitle(*s)
	}
	return ac
}

// SetDescription sets the "description" field.
func (ac *AppCreate) SetDescription(s string) *AppCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *AppCreate) SetNillableDescription(s *string) *AppCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetConf sets the "conf" field.
func (ac *AppCreate) SetConf(s string) *AppCreate {
	ac.mutation.SetConf(s)
	return ac
}

// SetNillableConf sets the "conf" field if the given value is not nil.
func (ac *AppCreate) SetNillableConf(s *string) *AppCreate {
	if s != nil {
		ac.SetConf(*s)
	}
	return ac
}

// SetAppID sets the "app_id" field.
func (ac *AppCreate) SetAppID(s string) *AppCreate {
	ac.mutation.SetAppID(s)
	return ac
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableAppID(s *string) *AppCreate {
	if s != nil {
		ac.SetAppID(*s)
	}
	return ac
}

// SetAppSecret sets the "app_secret" field.
func (ac *AppCreate) SetAppSecret(s string) *AppCreate {
	ac.mutation.SetAppSecret(s)
	return ac
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (ac *AppCreate) SetNillableAppSecret(s *string) *AppCreate {
	if s != nil {
		ac.SetAppSecret(*s)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AppCreate) SetStatus(i int) *AppCreate {
	ac.mutation.SetStatus(i)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AppCreate) SetNillableStatus(i *int) *AppCreate {
	if i != nil {
		ac.SetStatus(*i)
	}
	return ac
}

// SetIPWhitelist sets the "ip_whitelist" field.
func (ac *AppCreate) SetIPWhitelist(m []map[string]interface{}) *AppCreate {
	ac.mutation.SetIPWhitelist(m)
	return ac
}

// Mutation returns the AppMutation object of the builder.
func (ac *AppCreate) Mutation() *AppMutation {
	return ac.mutation
}

// Save creates the App in the database.
func (ac *AppCreate) Save(ctx context.Context) (*App, error) {
	var (
		err  error
		node *App
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AppCreate) SaveX(ctx context.Context) *App {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AppCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AppCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AppCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := app.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := app.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Conf(); !ok {
		v := app.DefaultConf
		ac.mutation.SetConf(v)
	}
	if _, ok := ac.mutation.Status(); !ok {
		v := app.DefaultStatus
		ac.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AppCreate) check() error {
	return nil
}

func (ac *AppCreate) sqlSave(ctx context.Context) (*App, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AppCreate) createSpec() (*App, *sqlgraph.CreateSpec) {
	var (
		_node = &App{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: app.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: app.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	if value, ok := ac.mutation.OperatorID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldOperatorID,
		})
		_node.OperatorID = value
	}
	if value, ok := ac.mutation.EncryptedOperatorRsaPublicKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldEncryptedOperatorRsaPublicKey,
		})
		_node.EncryptedOperatorRsaPublicKey = value
	}
	if value, ok := ac.mutation.EncryptedAppPrivateKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldEncryptedAppPrivateKey,
		})
		_node.EncryptedAppPrivateKey = value
	}
	if value, ok := ac.mutation.EncryptedAppPublicKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldEncryptedAppPublicKey,
		})
		_node.EncryptedAppPublicKey = value
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ac.mutation.Conf(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldConf,
		})
		_node.Conf = value
	}
	if value, ok := ac.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := ac.mutation.AppSecret(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppSecret,
		})
		_node.AppSecret = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ac.mutation.IPWhitelist(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: app.FieldIPWhitelist,
		})
		_node.IPWhitelist = value
	}
	return _node, _spec
}

// AppCreateBulk is the builder for creating many App entities in bulk.
type AppCreateBulk struct {
	config
	builders []*AppCreate
}

// Save creates the App entities in the database.
func (acb *AppCreateBulk) Save(ctx context.Context) ([]*App, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*App, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AppCreateBulk) SaveX(ctx context.Context) []*App {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AppCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AppCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
