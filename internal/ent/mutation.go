// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/litsoftware/litmedia/internal/ent/app"
	"github.com/litsoftware/litmedia/internal/ent/media"
	"github.com/litsoftware/litmedia/internal/ent/operator"
	"github.com/litsoftware/litmedia/internal/ent/predicate"
	"github.com/litsoftware/litmedia/internal/ent/schema"
	"github.com/litsoftware/litmedia/internal/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApp      = "App"
	TypeMedia    = "Media"
	TypeOperator = "Operator"
	TypeUser     = "User"
)

// AppMutation represents an operation that mutates the App nodes in the graph.
type AppMutation struct {
	config
	op                                Op
	typ                               string
	id                                *int
	created_at                        *time.Time
	updated_at                        *time.Time
	delete_at                         *time.Time
	operator_id                       *int
	addoperator_id                    *int
	encrypted_operator_rsa_public_key *string
	encrypted_app_private_key         *string
	encrypted_app_public_key          *string
	title                             *string
	description                       *string
	conf                              *string
	app_id                            *string
	app_secret                        *string
	status                            *int
	addstatus                         *int
	ip_whitelist                      *[]map[string]interface{}
	clearedFields                     map[string]struct{}
	done                              bool
	oldValue                          func(context.Context) (*App, error)
	predicates                        []predicate.App
}

var _ ent.Mutation = (*AppMutation)(nil)

// appOption allows management of the mutation configuration using functional options.
type appOption func(*AppMutation)

// newAppMutation creates new mutation for the App entity.
func newAppMutation(c config, op Op, opts ...appOption) *AppMutation {
	m := &AppMutation{
		config:        c,
		op:            op,
		typ:           TypeApp,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppID sets the ID field of the mutation.
func withAppID(id int) appOption {
	return func(m *AppMutation) {
		var (
			err   error
			once  sync.Once
			value *App
		)
		m.oldValue = func(ctx context.Context) (*App, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().App.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApp sets the old App of the mutation.
func withApp(node *App) appOption {
	return func(m *AppMutation) {
		m.oldValue = func(context.Context) (*App, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().App.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AppMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AppMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *AppMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[app.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *AppMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[app.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AppMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, app.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AppMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AppMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AppMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[app.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AppMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[app.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AppMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, app.FieldUpdatedAt)
}

// SetDeleteAt sets the "delete_at" field.
func (m *AppMutation) SetDeleteAt(t time.Time) {
	m.delete_at = &t
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *AppMutation) DeleteAt() (r time.Time, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldDeleteAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (m *AppMutation) ClearDeleteAt() {
	m.delete_at = nil
	m.clearedFields[app.FieldDeleteAt] = struct{}{}
}

// DeleteAtCleared returns if the "delete_at" field was cleared in this mutation.
func (m *AppMutation) DeleteAtCleared() bool {
	_, ok := m.clearedFields[app.FieldDeleteAt]
	return ok
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *AppMutation) ResetDeleteAt() {
	m.delete_at = nil
	delete(m.clearedFields, app.FieldDeleteAt)
}

// SetOperatorID sets the "operator_id" field.
func (m *AppMutation) SetOperatorID(i int) {
	m.operator_id = &i
	m.addoperator_id = nil
}

// OperatorID returns the value of the "operator_id" field in the mutation.
func (m *AppMutation) OperatorID() (r int, exists bool) {
	v := m.operator_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOperatorID returns the old "operator_id" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldOperatorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperatorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperatorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperatorID: %w", err)
	}
	return oldValue.OperatorID, nil
}

// AddOperatorID adds i to the "operator_id" field.
func (m *AppMutation) AddOperatorID(i int) {
	if m.addoperator_id != nil {
		*m.addoperator_id += i
	} else {
		m.addoperator_id = &i
	}
}

// AddedOperatorID returns the value that was added to the "operator_id" field in this mutation.
func (m *AppMutation) AddedOperatorID() (r int, exists bool) {
	v := m.addoperator_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOperatorID clears the value of the "operator_id" field.
func (m *AppMutation) ClearOperatorID() {
	m.operator_id = nil
	m.addoperator_id = nil
	m.clearedFields[app.FieldOperatorID] = struct{}{}
}

// OperatorIDCleared returns if the "operator_id" field was cleared in this mutation.
func (m *AppMutation) OperatorIDCleared() bool {
	_, ok := m.clearedFields[app.FieldOperatorID]
	return ok
}

// ResetOperatorID resets all changes to the "operator_id" field.
func (m *AppMutation) ResetOperatorID() {
	m.operator_id = nil
	m.addoperator_id = nil
	delete(m.clearedFields, app.FieldOperatorID)
}

// SetEncryptedOperatorRsaPublicKey sets the "encrypted_operator_rsa_public_key" field.
func (m *AppMutation) SetEncryptedOperatorRsaPublicKey(s string) {
	m.encrypted_operator_rsa_public_key = &s
}

// EncryptedOperatorRsaPublicKey returns the value of the "encrypted_operator_rsa_public_key" field in the mutation.
func (m *AppMutation) EncryptedOperatorRsaPublicKey() (r string, exists bool) {
	v := m.encrypted_operator_rsa_public_key
	if v == nil {
		return
	}
	return *v, true
}

// OldEncryptedOperatorRsaPublicKey returns the old "encrypted_operator_rsa_public_key" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldEncryptedOperatorRsaPublicKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEncryptedOperatorRsaPublicKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEncryptedOperatorRsaPublicKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEncryptedOperatorRsaPublicKey: %w", err)
	}
	return oldValue.EncryptedOperatorRsaPublicKey, nil
}

// ClearEncryptedOperatorRsaPublicKey clears the value of the "encrypted_operator_rsa_public_key" field.
func (m *AppMutation) ClearEncryptedOperatorRsaPublicKey() {
	m.encrypted_operator_rsa_public_key = nil
	m.clearedFields[app.FieldEncryptedOperatorRsaPublicKey] = struct{}{}
}

// EncryptedOperatorRsaPublicKeyCleared returns if the "encrypted_operator_rsa_public_key" field was cleared in this mutation.
func (m *AppMutation) EncryptedOperatorRsaPublicKeyCleared() bool {
	_, ok := m.clearedFields[app.FieldEncryptedOperatorRsaPublicKey]
	return ok
}

// ResetEncryptedOperatorRsaPublicKey resets all changes to the "encrypted_operator_rsa_public_key" field.
func (m *AppMutation) ResetEncryptedOperatorRsaPublicKey() {
	m.encrypted_operator_rsa_public_key = nil
	delete(m.clearedFields, app.FieldEncryptedOperatorRsaPublicKey)
}

// SetEncryptedAppPrivateKey sets the "encrypted_app_private_key" field.
func (m *AppMutation) SetEncryptedAppPrivateKey(s string) {
	m.encrypted_app_private_key = &s
}

// EncryptedAppPrivateKey returns the value of the "encrypted_app_private_key" field in the mutation.
func (m *AppMutation) EncryptedAppPrivateKey() (r string, exists bool) {
	v := m.encrypted_app_private_key
	if v == nil {
		return
	}
	return *v, true
}

// OldEncryptedAppPrivateKey returns the old "encrypted_app_private_key" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldEncryptedAppPrivateKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEncryptedAppPrivateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEncryptedAppPrivateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEncryptedAppPrivateKey: %w", err)
	}
	return oldValue.EncryptedAppPrivateKey, nil
}

// ClearEncryptedAppPrivateKey clears the value of the "encrypted_app_private_key" field.
func (m *AppMutation) ClearEncryptedAppPrivateKey() {
	m.encrypted_app_private_key = nil
	m.clearedFields[app.FieldEncryptedAppPrivateKey] = struct{}{}
}

// EncryptedAppPrivateKeyCleared returns if the "encrypted_app_private_key" field was cleared in this mutation.
func (m *AppMutation) EncryptedAppPrivateKeyCleared() bool {
	_, ok := m.clearedFields[app.FieldEncryptedAppPrivateKey]
	return ok
}

// ResetEncryptedAppPrivateKey resets all changes to the "encrypted_app_private_key" field.
func (m *AppMutation) ResetEncryptedAppPrivateKey() {
	m.encrypted_app_private_key = nil
	delete(m.clearedFields, app.FieldEncryptedAppPrivateKey)
}

// SetEncryptedAppPublicKey sets the "encrypted_app_public_key" field.
func (m *AppMutation) SetEncryptedAppPublicKey(s string) {
	m.encrypted_app_public_key = &s
}

// EncryptedAppPublicKey returns the value of the "encrypted_app_public_key" field in the mutation.
func (m *AppMutation) EncryptedAppPublicKey() (r string, exists bool) {
	v := m.encrypted_app_public_key
	if v == nil {
		return
	}
	return *v, true
}

// OldEncryptedAppPublicKey returns the old "encrypted_app_public_key" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldEncryptedAppPublicKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEncryptedAppPublicKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEncryptedAppPublicKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEncryptedAppPublicKey: %w", err)
	}
	return oldValue.EncryptedAppPublicKey, nil
}

// ClearEncryptedAppPublicKey clears the value of the "encrypted_app_public_key" field.
func (m *AppMutation) ClearEncryptedAppPublicKey() {
	m.encrypted_app_public_key = nil
	m.clearedFields[app.FieldEncryptedAppPublicKey] = struct{}{}
}

// EncryptedAppPublicKeyCleared returns if the "encrypted_app_public_key" field was cleared in this mutation.
func (m *AppMutation) EncryptedAppPublicKeyCleared() bool {
	_, ok := m.clearedFields[app.FieldEncryptedAppPublicKey]
	return ok
}

// ResetEncryptedAppPublicKey resets all changes to the "encrypted_app_public_key" field.
func (m *AppMutation) ResetEncryptedAppPublicKey() {
	m.encrypted_app_public_key = nil
	delete(m.clearedFields, app.FieldEncryptedAppPublicKey)
}

// SetTitle sets the "title" field.
func (m *AppMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AppMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *AppMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[app.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *AppMutation) TitleCleared() bool {
	_, ok := m.clearedFields[app.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *AppMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, app.FieldTitle)
}

// SetDescription sets the "description" field.
func (m *AppMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AppMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *AppMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[app.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *AppMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[app.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *AppMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, app.FieldDescription)
}

// SetConf sets the "conf" field.
func (m *AppMutation) SetConf(s string) {
	m.conf = &s
}

// Conf returns the value of the "conf" field in the mutation.
func (m *AppMutation) Conf() (r string, exists bool) {
	v := m.conf
	if v == nil {
		return
	}
	return *v, true
}

// OldConf returns the old "conf" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldConf(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConf is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConf requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConf: %w", err)
	}
	return oldValue.Conf, nil
}

// ClearConf clears the value of the "conf" field.
func (m *AppMutation) ClearConf() {
	m.conf = nil
	m.clearedFields[app.FieldConf] = struct{}{}
}

// ConfCleared returns if the "conf" field was cleared in this mutation.
func (m *AppMutation) ConfCleared() bool {
	_, ok := m.clearedFields[app.FieldConf]
	return ok
}

// ResetConf resets all changes to the "conf" field.
func (m *AppMutation) ResetConf() {
	m.conf = nil
	delete(m.clearedFields, app.FieldConf)
}

// SetAppID sets the "app_id" field.
func (m *AppMutation) SetAppID(s string) {
	m.app_id = &s
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppMutation) AppID() (r string, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldAppID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *AppMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[app.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *AppMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[app.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, app.FieldAppID)
}

// SetAppSecret sets the "app_secret" field.
func (m *AppMutation) SetAppSecret(s string) {
	m.app_secret = &s
}

// AppSecret returns the value of the "app_secret" field in the mutation.
func (m *AppMutation) AppSecret() (r string, exists bool) {
	v := m.app_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldAppSecret returns the old "app_secret" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldAppSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppSecret: %w", err)
	}
	return oldValue.AppSecret, nil
}

// ClearAppSecret clears the value of the "app_secret" field.
func (m *AppMutation) ClearAppSecret() {
	m.app_secret = nil
	m.clearedFields[app.FieldAppSecret] = struct{}{}
}

// AppSecretCleared returns if the "app_secret" field was cleared in this mutation.
func (m *AppMutation) AppSecretCleared() bool {
	_, ok := m.clearedFields[app.FieldAppSecret]
	return ok
}

// ResetAppSecret resets all changes to the "app_secret" field.
func (m *AppMutation) ResetAppSecret() {
	m.app_secret = nil
	delete(m.clearedFields, app.FieldAppSecret)
}

// SetStatus sets the "status" field.
func (m *AppMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *AppMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *AppMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *AppMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *AppMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[app.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *AppMutation) StatusCleared() bool {
	_, ok := m.clearedFields[app.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *AppMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, app.FieldStatus)
}

// SetIPWhitelist sets the "ip_whitelist" field.
func (m *AppMutation) SetIPWhitelist(value []map[string]interface{}) {
	m.ip_whitelist = &value
}

// IPWhitelist returns the value of the "ip_whitelist" field in the mutation.
func (m *AppMutation) IPWhitelist() (r []map[string]interface{}, exists bool) {
	v := m.ip_whitelist
	if v == nil {
		return
	}
	return *v, true
}

// OldIPWhitelist returns the old "ip_whitelist" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldIPWhitelist(ctx context.Context) (v []map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPWhitelist is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPWhitelist requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPWhitelist: %w", err)
	}
	return oldValue.IPWhitelist, nil
}

// ClearIPWhitelist clears the value of the "ip_whitelist" field.
func (m *AppMutation) ClearIPWhitelist() {
	m.ip_whitelist = nil
	m.clearedFields[app.FieldIPWhitelist] = struct{}{}
}

// IPWhitelistCleared returns if the "ip_whitelist" field was cleared in this mutation.
func (m *AppMutation) IPWhitelistCleared() bool {
	_, ok := m.clearedFields[app.FieldIPWhitelist]
	return ok
}

// ResetIPWhitelist resets all changes to the "ip_whitelist" field.
func (m *AppMutation) ResetIPWhitelist() {
	m.ip_whitelist = nil
	delete(m.clearedFields, app.FieldIPWhitelist)
}

// Where appends a list predicates to the AppMutation builder.
func (m *AppMutation) Where(ps ...predicate.App) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (App).
func (m *AppMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_at != nil {
		fields = append(fields, app.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, app.FieldUpdatedAt)
	}
	if m.delete_at != nil {
		fields = append(fields, app.FieldDeleteAt)
	}
	if m.operator_id != nil {
		fields = append(fields, app.FieldOperatorID)
	}
	if m.encrypted_operator_rsa_public_key != nil {
		fields = append(fields, app.FieldEncryptedOperatorRsaPublicKey)
	}
	if m.encrypted_app_private_key != nil {
		fields = append(fields, app.FieldEncryptedAppPrivateKey)
	}
	if m.encrypted_app_public_key != nil {
		fields = append(fields, app.FieldEncryptedAppPublicKey)
	}
	if m.title != nil {
		fields = append(fields, app.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, app.FieldDescription)
	}
	if m.conf != nil {
		fields = append(fields, app.FieldConf)
	}
	if m.app_id != nil {
		fields = append(fields, app.FieldAppID)
	}
	if m.app_secret != nil {
		fields = append(fields, app.FieldAppSecret)
	}
	if m.status != nil {
		fields = append(fields, app.FieldStatus)
	}
	if m.ip_whitelist != nil {
		fields = append(fields, app.FieldIPWhitelist)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case app.FieldCreatedAt:
		return m.CreatedAt()
	case app.FieldUpdatedAt:
		return m.UpdatedAt()
	case app.FieldDeleteAt:
		return m.DeleteAt()
	case app.FieldOperatorID:
		return m.OperatorID()
	case app.FieldEncryptedOperatorRsaPublicKey:
		return m.EncryptedOperatorRsaPublicKey()
	case app.FieldEncryptedAppPrivateKey:
		return m.EncryptedAppPrivateKey()
	case app.FieldEncryptedAppPublicKey:
		return m.EncryptedAppPublicKey()
	case app.FieldTitle:
		return m.Title()
	case app.FieldDescription:
		return m.Description()
	case app.FieldConf:
		return m.Conf()
	case app.FieldAppID:
		return m.AppID()
	case app.FieldAppSecret:
		return m.AppSecret()
	case app.FieldStatus:
		return m.Status()
	case app.FieldIPWhitelist:
		return m.IPWhitelist()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case app.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case app.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case app.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	case app.FieldOperatorID:
		return m.OldOperatorID(ctx)
	case app.FieldEncryptedOperatorRsaPublicKey:
		return m.OldEncryptedOperatorRsaPublicKey(ctx)
	case app.FieldEncryptedAppPrivateKey:
		return m.OldEncryptedAppPrivateKey(ctx)
	case app.FieldEncryptedAppPublicKey:
		return m.OldEncryptedAppPublicKey(ctx)
	case app.FieldTitle:
		return m.OldTitle(ctx)
	case app.FieldDescription:
		return m.OldDescription(ctx)
	case app.FieldConf:
		return m.OldConf(ctx)
	case app.FieldAppID:
		return m.OldAppID(ctx)
	case app.FieldAppSecret:
		return m.OldAppSecret(ctx)
	case app.FieldStatus:
		return m.OldStatus(ctx)
	case app.FieldIPWhitelist:
		return m.OldIPWhitelist(ctx)
	}
	return nil, fmt.Errorf("unknown App field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppMutation) SetField(name string, value ent.Value) error {
	switch name {
	case app.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case app.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case app.FieldDeleteAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	case app.FieldOperatorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperatorID(v)
		return nil
	case app.FieldEncryptedOperatorRsaPublicKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEncryptedOperatorRsaPublicKey(v)
		return nil
	case app.FieldEncryptedAppPrivateKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEncryptedAppPrivateKey(v)
		return nil
	case app.FieldEncryptedAppPublicKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEncryptedAppPublicKey(v)
		return nil
	case app.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case app.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case app.FieldConf:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConf(v)
		return nil
	case app.FieldAppID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case app.FieldAppSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppSecret(v)
		return nil
	case app.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case app.FieldIPWhitelist:
		v, ok := value.([]map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPWhitelist(v)
		return nil
	}
	return fmt.Errorf("unknown App field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppMutation) AddedFields() []string {
	var fields []string
	if m.addoperator_id != nil {
		fields = append(fields, app.FieldOperatorID)
	}
	if m.addstatus != nil {
		fields = append(fields, app.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case app.FieldOperatorID:
		return m.AddedOperatorID()
	case app.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppMutation) AddField(name string, value ent.Value) error {
	switch name {
	case app.FieldOperatorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOperatorID(v)
		return nil
	case app.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown App numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(app.FieldCreatedAt) {
		fields = append(fields, app.FieldCreatedAt)
	}
	if m.FieldCleared(app.FieldUpdatedAt) {
		fields = append(fields, app.FieldUpdatedAt)
	}
	if m.FieldCleared(app.FieldDeleteAt) {
		fields = append(fields, app.FieldDeleteAt)
	}
	if m.FieldCleared(app.FieldOperatorID) {
		fields = append(fields, app.FieldOperatorID)
	}
	if m.FieldCleared(app.FieldEncryptedOperatorRsaPublicKey) {
		fields = append(fields, app.FieldEncryptedOperatorRsaPublicKey)
	}
	if m.FieldCleared(app.FieldEncryptedAppPrivateKey) {
		fields = append(fields, app.FieldEncryptedAppPrivateKey)
	}
	if m.FieldCleared(app.FieldEncryptedAppPublicKey) {
		fields = append(fields, app.FieldEncryptedAppPublicKey)
	}
	if m.FieldCleared(app.FieldTitle) {
		fields = append(fields, app.FieldTitle)
	}
	if m.FieldCleared(app.FieldDescription) {
		fields = append(fields, app.FieldDescription)
	}
	if m.FieldCleared(app.FieldConf) {
		fields = append(fields, app.FieldConf)
	}
	if m.FieldCleared(app.FieldAppID) {
		fields = append(fields, app.FieldAppID)
	}
	if m.FieldCleared(app.FieldAppSecret) {
		fields = append(fields, app.FieldAppSecret)
	}
	if m.FieldCleared(app.FieldStatus) {
		fields = append(fields, app.FieldStatus)
	}
	if m.FieldCleared(app.FieldIPWhitelist) {
		fields = append(fields, app.FieldIPWhitelist)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppMutation) ClearField(name string) error {
	switch name {
	case app.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case app.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case app.FieldDeleteAt:
		m.ClearDeleteAt()
		return nil
	case app.FieldOperatorID:
		m.ClearOperatorID()
		return nil
	case app.FieldEncryptedOperatorRsaPublicKey:
		m.ClearEncryptedOperatorRsaPublicKey()
		return nil
	case app.FieldEncryptedAppPrivateKey:
		m.ClearEncryptedAppPrivateKey()
		return nil
	case app.FieldEncryptedAppPublicKey:
		m.ClearEncryptedAppPublicKey()
		return nil
	case app.FieldTitle:
		m.ClearTitle()
		return nil
	case app.FieldDescription:
		m.ClearDescription()
		return nil
	case app.FieldConf:
		m.ClearConf()
		return nil
	case app.FieldAppID:
		m.ClearAppID()
		return nil
	case app.FieldAppSecret:
		m.ClearAppSecret()
		return nil
	case app.FieldStatus:
		m.ClearStatus()
		return nil
	case app.FieldIPWhitelist:
		m.ClearIPWhitelist()
		return nil
	}
	return fmt.Errorf("unknown App nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppMutation) ResetField(name string) error {
	switch name {
	case app.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case app.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case app.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	case app.FieldOperatorID:
		m.ResetOperatorID()
		return nil
	case app.FieldEncryptedOperatorRsaPublicKey:
		m.ResetEncryptedOperatorRsaPublicKey()
		return nil
	case app.FieldEncryptedAppPrivateKey:
		m.ResetEncryptedAppPrivateKey()
		return nil
	case app.FieldEncryptedAppPublicKey:
		m.ResetEncryptedAppPublicKey()
		return nil
	case app.FieldTitle:
		m.ResetTitle()
		return nil
	case app.FieldDescription:
		m.ResetDescription()
		return nil
	case app.FieldConf:
		m.ResetConf()
		return nil
	case app.FieldAppID:
		m.ResetAppID()
		return nil
	case app.FieldAppSecret:
		m.ResetAppSecret()
		return nil
	case app.FieldStatus:
		m.ResetStatus()
		return nil
	case app.FieldIPWhitelist:
		m.ResetIPWhitelist()
		return nil
	}
	return fmt.Errorf("unknown App field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown App unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown App edge %s", name)
}

// MediaMutation represents an operation that mutates the Media nodes in the graph.
type MediaMutation struct {
	config
	op             Op
	typ            string
	id             *int
	created_at     *time.Time
	updated_at     *time.Time
	delete_at      *time.Time
	hash           *string
	user_id        *int
	adduser_id     *int
	app_id         *int
	addapp_id      *int
	sn             *string
	org_file_name  *string
	file_name      *string
	size           *schema.MediaSize
	mime           *string
	ext            *string
	ref_count      *int
	addref_count   *int
	level          *int
	addlevel       *int
	_type          *int
	add_type       *int
	status         *int
	addstatus      *int
	reason_type    *int
	addreason_type *int
	save_path      *string
	full_path      *string
	is_encrypted   *bool
	reason         *string
	out_user_id    *int64
	addout_user_id *int64
	company_id     *int64
	addcompany_id  *int64
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Media, error)
	predicates     []predicate.Media
}

var _ ent.Mutation = (*MediaMutation)(nil)

// mediaOption allows management of the mutation configuration using functional options.
type mediaOption func(*MediaMutation)

// newMediaMutation creates new mutation for the Media entity.
func newMediaMutation(c config, op Op, opts ...mediaOption) *MediaMutation {
	m := &MediaMutation{
		config:        c,
		op:            op,
		typ:           TypeMedia,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMediaID sets the ID field of the mutation.
func withMediaID(id int) mediaOption {
	return func(m *MediaMutation) {
		var (
			err   error
			once  sync.Once
			value *Media
		)
		m.oldValue = func(ctx context.Context) (*Media, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Media.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedia sets the old Media of the mutation.
func withMedia(node *Media) mediaOption {
	return func(m *MediaMutation) {
		m.oldValue = func(context.Context) (*Media, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MediaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MediaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MediaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MediaMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Media.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MediaMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MediaMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *MediaMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[media.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *MediaMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[media.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MediaMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, media.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MediaMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MediaMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *MediaMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[media.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *MediaMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[media.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MediaMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, media.FieldUpdatedAt)
}

// SetDeleteAt sets the "delete_at" field.
func (m *MediaMutation) SetDeleteAt(t time.Time) {
	m.delete_at = &t
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *MediaMutation) DeleteAt() (r time.Time, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldDeleteAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (m *MediaMutation) ClearDeleteAt() {
	m.delete_at = nil
	m.clearedFields[media.FieldDeleteAt] = struct{}{}
}

// DeleteAtCleared returns if the "delete_at" field was cleared in this mutation.
func (m *MediaMutation) DeleteAtCleared() bool {
	_, ok := m.clearedFields[media.FieldDeleteAt]
	return ok
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *MediaMutation) ResetDeleteAt() {
	m.delete_at = nil
	delete(m.clearedFields, media.FieldDeleteAt)
}

// SetHash sets the "hash" field.
func (m *MediaMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *MediaMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ClearHash clears the value of the "hash" field.
func (m *MediaMutation) ClearHash() {
	m.hash = nil
	m.clearedFields[media.FieldHash] = struct{}{}
}

// HashCleared returns if the "hash" field was cleared in this mutation.
func (m *MediaMutation) HashCleared() bool {
	_, ok := m.clearedFields[media.FieldHash]
	return ok
}

// ResetHash resets all changes to the "hash" field.
func (m *MediaMutation) ResetHash() {
	m.hash = nil
	delete(m.clearedFields, media.FieldHash)
}

// SetUserID sets the "user_id" field.
func (m *MediaMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *MediaMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *MediaMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *MediaMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearUserID clears the value of the "user_id" field.
func (m *MediaMutation) ClearUserID() {
	m.user_id = nil
	m.adduser_id = nil
	m.clearedFields[media.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *MediaMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[media.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *MediaMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
	delete(m.clearedFields, media.FieldUserID)
}

// SetAppID sets the "app_id" field.
func (m *MediaMutation) SetAppID(i int) {
	m.app_id = &i
	m.addapp_id = nil
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *MediaMutation) AppID() (r int, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldAppID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// AddAppID adds i to the "app_id" field.
func (m *MediaMutation) AddAppID(i int) {
	if m.addapp_id != nil {
		*m.addapp_id += i
	} else {
		m.addapp_id = &i
	}
}

// AddedAppID returns the value that was added to the "app_id" field in this mutation.
func (m *MediaMutation) AddedAppID() (r int, exists bool) {
	v := m.addapp_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearAppID clears the value of the "app_id" field.
func (m *MediaMutation) ClearAppID() {
	m.app_id = nil
	m.addapp_id = nil
	m.clearedFields[media.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *MediaMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[media.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *MediaMutation) ResetAppID() {
	m.app_id = nil
	m.addapp_id = nil
	delete(m.clearedFields, media.FieldAppID)
}

// SetSn sets the "sn" field.
func (m *MediaMutation) SetSn(s string) {
	m.sn = &s
}

// Sn returns the value of the "sn" field in the mutation.
func (m *MediaMutation) Sn() (r string, exists bool) {
	v := m.sn
	if v == nil {
		return
	}
	return *v, true
}

// OldSn returns the old "sn" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSn: %w", err)
	}
	return oldValue.Sn, nil
}

// ClearSn clears the value of the "sn" field.
func (m *MediaMutation) ClearSn() {
	m.sn = nil
	m.clearedFields[media.FieldSn] = struct{}{}
}

// SnCleared returns if the "sn" field was cleared in this mutation.
func (m *MediaMutation) SnCleared() bool {
	_, ok := m.clearedFields[media.FieldSn]
	return ok
}

// ResetSn resets all changes to the "sn" field.
func (m *MediaMutation) ResetSn() {
	m.sn = nil
	delete(m.clearedFields, media.FieldSn)
}

// SetOrgFileName sets the "org_file_name" field.
func (m *MediaMutation) SetOrgFileName(s string) {
	m.org_file_name = &s
}

// OrgFileName returns the value of the "org_file_name" field in the mutation.
func (m *MediaMutation) OrgFileName() (r string, exists bool) {
	v := m.org_file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgFileName returns the old "org_file_name" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldOrgFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgFileName: %w", err)
	}
	return oldValue.OrgFileName, nil
}

// ResetOrgFileName resets all changes to the "org_file_name" field.
func (m *MediaMutation) ResetOrgFileName() {
	m.org_file_name = nil
}

// SetFileName sets the "file_name" field.
func (m *MediaMutation) SetFileName(s string) {
	m.file_name = &s
}

// FileName returns the value of the "file_name" field in the mutation.
func (m *MediaMutation) FileName() (r string, exists bool) {
	v := m.file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "file_name" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ResetFileName resets all changes to the "file_name" field.
func (m *MediaMutation) ResetFileName() {
	m.file_name = nil
}

// SetSize sets the "size" field.
func (m *MediaMutation) SetSize(ss schema.MediaSize) {
	m.size = &ss
}

// Size returns the value of the "size" field in the mutation.
func (m *MediaMutation) Size() (r schema.MediaSize, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldSize(ctx context.Context) (v schema.MediaSize, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// ClearSize clears the value of the "size" field.
func (m *MediaMutation) ClearSize() {
	m.size = nil
	m.clearedFields[media.FieldSize] = struct{}{}
}

// SizeCleared returns if the "size" field was cleared in this mutation.
func (m *MediaMutation) SizeCleared() bool {
	_, ok := m.clearedFields[media.FieldSize]
	return ok
}

// ResetSize resets all changes to the "size" field.
func (m *MediaMutation) ResetSize() {
	m.size = nil
	delete(m.clearedFields, media.FieldSize)
}

// SetMime sets the "mime" field.
func (m *MediaMutation) SetMime(s string) {
	m.mime = &s
}

// Mime returns the value of the "mime" field in the mutation.
func (m *MediaMutation) Mime() (r string, exists bool) {
	v := m.mime
	if v == nil {
		return
	}
	return *v, true
}

// OldMime returns the old "mime" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldMime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMime: %w", err)
	}
	return oldValue.Mime, nil
}

// ClearMime clears the value of the "mime" field.
func (m *MediaMutation) ClearMime() {
	m.mime = nil
	m.clearedFields[media.FieldMime] = struct{}{}
}

// MimeCleared returns if the "mime" field was cleared in this mutation.
func (m *MediaMutation) MimeCleared() bool {
	_, ok := m.clearedFields[media.FieldMime]
	return ok
}

// ResetMime resets all changes to the "mime" field.
func (m *MediaMutation) ResetMime() {
	m.mime = nil
	delete(m.clearedFields, media.FieldMime)
}

// SetExt sets the "ext" field.
func (m *MediaMutation) SetExt(s string) {
	m.ext = &s
}

// Ext returns the value of the "ext" field in the mutation.
func (m *MediaMutation) Ext() (r string, exists bool) {
	v := m.ext
	if v == nil {
		return
	}
	return *v, true
}

// OldExt returns the old "ext" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldExt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExt: %w", err)
	}
	return oldValue.Ext, nil
}

// ClearExt clears the value of the "ext" field.
func (m *MediaMutation) ClearExt() {
	m.ext = nil
	m.clearedFields[media.FieldExt] = struct{}{}
}

// ExtCleared returns if the "ext" field was cleared in this mutation.
func (m *MediaMutation) ExtCleared() bool {
	_, ok := m.clearedFields[media.FieldExt]
	return ok
}

// ResetExt resets all changes to the "ext" field.
func (m *MediaMutation) ResetExt() {
	m.ext = nil
	delete(m.clearedFields, media.FieldExt)
}

// SetRefCount sets the "ref_count" field.
func (m *MediaMutation) SetRefCount(i int) {
	m.ref_count = &i
	m.addref_count = nil
}

// RefCount returns the value of the "ref_count" field in the mutation.
func (m *MediaMutation) RefCount() (r int, exists bool) {
	v := m.ref_count
	if v == nil {
		return
	}
	return *v, true
}

// OldRefCount returns the old "ref_count" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldRefCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefCount: %w", err)
	}
	return oldValue.RefCount, nil
}

// AddRefCount adds i to the "ref_count" field.
func (m *MediaMutation) AddRefCount(i int) {
	if m.addref_count != nil {
		*m.addref_count += i
	} else {
		m.addref_count = &i
	}
}

// AddedRefCount returns the value that was added to the "ref_count" field in this mutation.
func (m *MediaMutation) AddedRefCount() (r int, exists bool) {
	v := m.addref_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearRefCount clears the value of the "ref_count" field.
func (m *MediaMutation) ClearRefCount() {
	m.ref_count = nil
	m.addref_count = nil
	m.clearedFields[media.FieldRefCount] = struct{}{}
}

// RefCountCleared returns if the "ref_count" field was cleared in this mutation.
func (m *MediaMutation) RefCountCleared() bool {
	_, ok := m.clearedFields[media.FieldRefCount]
	return ok
}

// ResetRefCount resets all changes to the "ref_count" field.
func (m *MediaMutation) ResetRefCount() {
	m.ref_count = nil
	m.addref_count = nil
	delete(m.clearedFields, media.FieldRefCount)
}

// SetLevel sets the "level" field.
func (m *MediaMutation) SetLevel(i int) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the value of the "level" field in the mutation.
func (m *MediaMutation) Level() (r int, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldLevel(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// AddLevel adds i to the "level" field.
func (m *MediaMutation) AddLevel(i int) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the "level" field in this mutation.
func (m *MediaMutation) AddedLevel() (r int, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ClearLevel clears the value of the "level" field.
func (m *MediaMutation) ClearLevel() {
	m.level = nil
	m.addlevel = nil
	m.clearedFields[media.FieldLevel] = struct{}{}
}

// LevelCleared returns if the "level" field was cleared in this mutation.
func (m *MediaMutation) LevelCleared() bool {
	_, ok := m.clearedFields[media.FieldLevel]
	return ok
}

// ResetLevel resets all changes to the "level" field.
func (m *MediaMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
	delete(m.clearedFields, media.FieldLevel)
}

// SetType sets the "type" field.
func (m *MediaMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *MediaMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *MediaMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *MediaMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ClearType clears the value of the "type" field.
func (m *MediaMutation) ClearType() {
	m._type = nil
	m.add_type = nil
	m.clearedFields[media.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *MediaMutation) TypeCleared() bool {
	_, ok := m.clearedFields[media.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *MediaMutation) ResetType() {
	m._type = nil
	m.add_type = nil
	delete(m.clearedFields, media.FieldType)
}

// SetStatus sets the "status" field.
func (m *MediaMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *MediaMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *MediaMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *MediaMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *MediaMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[media.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *MediaMutation) StatusCleared() bool {
	_, ok := m.clearedFields[media.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *MediaMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, media.FieldStatus)
}

// SetReasonType sets the "reason_type" field.
func (m *MediaMutation) SetReasonType(i int) {
	m.reason_type = &i
	m.addreason_type = nil
}

// ReasonType returns the value of the "reason_type" field in the mutation.
func (m *MediaMutation) ReasonType() (r int, exists bool) {
	v := m.reason_type
	if v == nil {
		return
	}
	return *v, true
}

// OldReasonType returns the old "reason_type" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldReasonType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReasonType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReasonType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReasonType: %w", err)
	}
	return oldValue.ReasonType, nil
}

// AddReasonType adds i to the "reason_type" field.
func (m *MediaMutation) AddReasonType(i int) {
	if m.addreason_type != nil {
		*m.addreason_type += i
	} else {
		m.addreason_type = &i
	}
}

// AddedReasonType returns the value that was added to the "reason_type" field in this mutation.
func (m *MediaMutation) AddedReasonType() (r int, exists bool) {
	v := m.addreason_type
	if v == nil {
		return
	}
	return *v, true
}

// ClearReasonType clears the value of the "reason_type" field.
func (m *MediaMutation) ClearReasonType() {
	m.reason_type = nil
	m.addreason_type = nil
	m.clearedFields[media.FieldReasonType] = struct{}{}
}

// ReasonTypeCleared returns if the "reason_type" field was cleared in this mutation.
func (m *MediaMutation) ReasonTypeCleared() bool {
	_, ok := m.clearedFields[media.FieldReasonType]
	return ok
}

// ResetReasonType resets all changes to the "reason_type" field.
func (m *MediaMutation) ResetReasonType() {
	m.reason_type = nil
	m.addreason_type = nil
	delete(m.clearedFields, media.FieldReasonType)
}

// SetSavePath sets the "save_path" field.
func (m *MediaMutation) SetSavePath(s string) {
	m.save_path = &s
}

// SavePath returns the value of the "save_path" field in the mutation.
func (m *MediaMutation) SavePath() (r string, exists bool) {
	v := m.save_path
	if v == nil {
		return
	}
	return *v, true
}

// OldSavePath returns the old "save_path" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldSavePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSavePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSavePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSavePath: %w", err)
	}
	return oldValue.SavePath, nil
}

// ClearSavePath clears the value of the "save_path" field.
func (m *MediaMutation) ClearSavePath() {
	m.save_path = nil
	m.clearedFields[media.FieldSavePath] = struct{}{}
}

// SavePathCleared returns if the "save_path" field was cleared in this mutation.
func (m *MediaMutation) SavePathCleared() bool {
	_, ok := m.clearedFields[media.FieldSavePath]
	return ok
}

// ResetSavePath resets all changes to the "save_path" field.
func (m *MediaMutation) ResetSavePath() {
	m.save_path = nil
	delete(m.clearedFields, media.FieldSavePath)
}

// SetFullPath sets the "full_path" field.
func (m *MediaMutation) SetFullPath(s string) {
	m.full_path = &s
}

// FullPath returns the value of the "full_path" field in the mutation.
func (m *MediaMutation) FullPath() (r string, exists bool) {
	v := m.full_path
	if v == nil {
		return
	}
	return *v, true
}

// OldFullPath returns the old "full_path" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldFullPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullPath: %w", err)
	}
	return oldValue.FullPath, nil
}

// ClearFullPath clears the value of the "full_path" field.
func (m *MediaMutation) ClearFullPath() {
	m.full_path = nil
	m.clearedFields[media.FieldFullPath] = struct{}{}
}

// FullPathCleared returns if the "full_path" field was cleared in this mutation.
func (m *MediaMutation) FullPathCleared() bool {
	_, ok := m.clearedFields[media.FieldFullPath]
	return ok
}

// ResetFullPath resets all changes to the "full_path" field.
func (m *MediaMutation) ResetFullPath() {
	m.full_path = nil
	delete(m.clearedFields, media.FieldFullPath)
}

// SetIsEncrypted sets the "is_encrypted" field.
func (m *MediaMutation) SetIsEncrypted(b bool) {
	m.is_encrypted = &b
}

// IsEncrypted returns the value of the "is_encrypted" field in the mutation.
func (m *MediaMutation) IsEncrypted() (r bool, exists bool) {
	v := m.is_encrypted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEncrypted returns the old "is_encrypted" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldIsEncrypted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEncrypted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEncrypted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEncrypted: %w", err)
	}
	return oldValue.IsEncrypted, nil
}

// ClearIsEncrypted clears the value of the "is_encrypted" field.
func (m *MediaMutation) ClearIsEncrypted() {
	m.is_encrypted = nil
	m.clearedFields[media.FieldIsEncrypted] = struct{}{}
}

// IsEncryptedCleared returns if the "is_encrypted" field was cleared in this mutation.
func (m *MediaMutation) IsEncryptedCleared() bool {
	_, ok := m.clearedFields[media.FieldIsEncrypted]
	return ok
}

// ResetIsEncrypted resets all changes to the "is_encrypted" field.
func (m *MediaMutation) ResetIsEncrypted() {
	m.is_encrypted = nil
	delete(m.clearedFields, media.FieldIsEncrypted)
}

// SetReason sets the "reason" field.
func (m *MediaMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *MediaMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ClearReason clears the value of the "reason" field.
func (m *MediaMutation) ClearReason() {
	m.reason = nil
	m.clearedFields[media.FieldReason] = struct{}{}
}

// ReasonCleared returns if the "reason" field was cleared in this mutation.
func (m *MediaMutation) ReasonCleared() bool {
	_, ok := m.clearedFields[media.FieldReason]
	return ok
}

// ResetReason resets all changes to the "reason" field.
func (m *MediaMutation) ResetReason() {
	m.reason = nil
	delete(m.clearedFields, media.FieldReason)
}

// SetOutUserID sets the "out_user_id" field.
func (m *MediaMutation) SetOutUserID(i int64) {
	m.out_user_id = &i
	m.addout_user_id = nil
}

// OutUserID returns the value of the "out_user_id" field in the mutation.
func (m *MediaMutation) OutUserID() (r int64, exists bool) {
	v := m.out_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOutUserID returns the old "out_user_id" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldOutUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutUserID: %w", err)
	}
	return oldValue.OutUserID, nil
}

// AddOutUserID adds i to the "out_user_id" field.
func (m *MediaMutation) AddOutUserID(i int64) {
	if m.addout_user_id != nil {
		*m.addout_user_id += i
	} else {
		m.addout_user_id = &i
	}
}

// AddedOutUserID returns the value that was added to the "out_user_id" field in this mutation.
func (m *MediaMutation) AddedOutUserID() (r int64, exists bool) {
	v := m.addout_user_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOutUserID clears the value of the "out_user_id" field.
func (m *MediaMutation) ClearOutUserID() {
	m.out_user_id = nil
	m.addout_user_id = nil
	m.clearedFields[media.FieldOutUserID] = struct{}{}
}

// OutUserIDCleared returns if the "out_user_id" field was cleared in this mutation.
func (m *MediaMutation) OutUserIDCleared() bool {
	_, ok := m.clearedFields[media.FieldOutUserID]
	return ok
}

// ResetOutUserID resets all changes to the "out_user_id" field.
func (m *MediaMutation) ResetOutUserID() {
	m.out_user_id = nil
	m.addout_user_id = nil
	delete(m.clearedFields, media.FieldOutUserID)
}

// SetCompanyID sets the "company_id" field.
func (m *MediaMutation) SetCompanyID(i int64) {
	m.company_id = &i
	m.addcompany_id = nil
}

// CompanyID returns the value of the "company_id" field in the mutation.
func (m *MediaMutation) CompanyID() (r int64, exists bool) {
	v := m.company_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCompanyID returns the old "company_id" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldCompanyID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompanyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompanyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompanyID: %w", err)
	}
	return oldValue.CompanyID, nil
}

// AddCompanyID adds i to the "company_id" field.
func (m *MediaMutation) AddCompanyID(i int64) {
	if m.addcompany_id != nil {
		*m.addcompany_id += i
	} else {
		m.addcompany_id = &i
	}
}

// AddedCompanyID returns the value that was added to the "company_id" field in this mutation.
func (m *MediaMutation) AddedCompanyID() (r int64, exists bool) {
	v := m.addcompany_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCompanyID clears the value of the "company_id" field.
func (m *MediaMutation) ClearCompanyID() {
	m.company_id = nil
	m.addcompany_id = nil
	m.clearedFields[media.FieldCompanyID] = struct{}{}
}

// CompanyIDCleared returns if the "company_id" field was cleared in this mutation.
func (m *MediaMutation) CompanyIDCleared() bool {
	_, ok := m.clearedFields[media.FieldCompanyID]
	return ok
}

// ResetCompanyID resets all changes to the "company_id" field.
func (m *MediaMutation) ResetCompanyID() {
	m.company_id = nil
	m.addcompany_id = nil
	delete(m.clearedFields, media.FieldCompanyID)
}

// Where appends a list predicates to the MediaMutation builder.
func (m *MediaMutation) Where(ps ...predicate.Media) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MediaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Media).
func (m *MediaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MediaMutation) Fields() []string {
	fields := make([]string, 0, 23)
	if m.created_at != nil {
		fields = append(fields, media.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, media.FieldUpdatedAt)
	}
	if m.delete_at != nil {
		fields = append(fields, media.FieldDeleteAt)
	}
	if m.hash != nil {
		fields = append(fields, media.FieldHash)
	}
	if m.user_id != nil {
		fields = append(fields, media.FieldUserID)
	}
	if m.app_id != nil {
		fields = append(fields, media.FieldAppID)
	}
	if m.sn != nil {
		fields = append(fields, media.FieldSn)
	}
	if m.org_file_name != nil {
		fields = append(fields, media.FieldOrgFileName)
	}
	if m.file_name != nil {
		fields = append(fields, media.FieldFileName)
	}
	if m.size != nil {
		fields = append(fields, media.FieldSize)
	}
	if m.mime != nil {
		fields = append(fields, media.FieldMime)
	}
	if m.ext != nil {
		fields = append(fields, media.FieldExt)
	}
	if m.ref_count != nil {
		fields = append(fields, media.FieldRefCount)
	}
	if m.level != nil {
		fields = append(fields, media.FieldLevel)
	}
	if m._type != nil {
		fields = append(fields, media.FieldType)
	}
	if m.status != nil {
		fields = append(fields, media.FieldStatus)
	}
	if m.reason_type != nil {
		fields = append(fields, media.FieldReasonType)
	}
	if m.save_path != nil {
		fields = append(fields, media.FieldSavePath)
	}
	if m.full_path != nil {
		fields = append(fields, media.FieldFullPath)
	}
	if m.is_encrypted != nil {
		fields = append(fields, media.FieldIsEncrypted)
	}
	if m.reason != nil {
		fields = append(fields, media.FieldReason)
	}
	if m.out_user_id != nil {
		fields = append(fields, media.FieldOutUserID)
	}
	if m.company_id != nil {
		fields = append(fields, media.FieldCompanyID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MediaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case media.FieldCreatedAt:
		return m.CreatedAt()
	case media.FieldUpdatedAt:
		return m.UpdatedAt()
	case media.FieldDeleteAt:
		return m.DeleteAt()
	case media.FieldHash:
		return m.Hash()
	case media.FieldUserID:
		return m.UserID()
	case media.FieldAppID:
		return m.AppID()
	case media.FieldSn:
		return m.Sn()
	case media.FieldOrgFileName:
		return m.OrgFileName()
	case media.FieldFileName:
		return m.FileName()
	case media.FieldSize:
		return m.Size()
	case media.FieldMime:
		return m.Mime()
	case media.FieldExt:
		return m.Ext()
	case media.FieldRefCount:
		return m.RefCount()
	case media.FieldLevel:
		return m.Level()
	case media.FieldType:
		return m.GetType()
	case media.FieldStatus:
		return m.Status()
	case media.FieldReasonType:
		return m.ReasonType()
	case media.FieldSavePath:
		return m.SavePath()
	case media.FieldFullPath:
		return m.FullPath()
	case media.FieldIsEncrypted:
		return m.IsEncrypted()
	case media.FieldReason:
		return m.Reason()
	case media.FieldOutUserID:
		return m.OutUserID()
	case media.FieldCompanyID:
		return m.CompanyID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MediaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case media.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case media.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case media.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	case media.FieldHash:
		return m.OldHash(ctx)
	case media.FieldUserID:
		return m.OldUserID(ctx)
	case media.FieldAppID:
		return m.OldAppID(ctx)
	case media.FieldSn:
		return m.OldSn(ctx)
	case media.FieldOrgFileName:
		return m.OldOrgFileName(ctx)
	case media.FieldFileName:
		return m.OldFileName(ctx)
	case media.FieldSize:
		return m.OldSize(ctx)
	case media.FieldMime:
		return m.OldMime(ctx)
	case media.FieldExt:
		return m.OldExt(ctx)
	case media.FieldRefCount:
		return m.OldRefCount(ctx)
	case media.FieldLevel:
		return m.OldLevel(ctx)
	case media.FieldType:
		return m.OldType(ctx)
	case media.FieldStatus:
		return m.OldStatus(ctx)
	case media.FieldReasonType:
		return m.OldReasonType(ctx)
	case media.FieldSavePath:
		return m.OldSavePath(ctx)
	case media.FieldFullPath:
		return m.OldFullPath(ctx)
	case media.FieldIsEncrypted:
		return m.OldIsEncrypted(ctx)
	case media.FieldReason:
		return m.OldReason(ctx)
	case media.FieldOutUserID:
		return m.OldOutUserID(ctx)
	case media.FieldCompanyID:
		return m.OldCompanyID(ctx)
	}
	return nil, fmt.Errorf("unknown Media field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case media.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case media.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case media.FieldDeleteAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	case media.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case media.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case media.FieldAppID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case media.FieldSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSn(v)
		return nil
	case media.FieldOrgFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgFileName(v)
		return nil
	case media.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case media.FieldSize:
		v, ok := value.(schema.MediaSize)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case media.FieldMime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMime(v)
		return nil
	case media.FieldExt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExt(v)
		return nil
	case media.FieldRefCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefCount(v)
		return nil
	case media.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case media.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case media.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case media.FieldReasonType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReasonType(v)
		return nil
	case media.FieldSavePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSavePath(v)
		return nil
	case media.FieldFullPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullPath(v)
		return nil
	case media.FieldIsEncrypted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEncrypted(v)
		return nil
	case media.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case media.FieldOutUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutUserID(v)
		return nil
	case media.FieldCompanyID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompanyID(v)
		return nil
	}
	return fmt.Errorf("unknown Media field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MediaMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, media.FieldUserID)
	}
	if m.addapp_id != nil {
		fields = append(fields, media.FieldAppID)
	}
	if m.addref_count != nil {
		fields = append(fields, media.FieldRefCount)
	}
	if m.addlevel != nil {
		fields = append(fields, media.FieldLevel)
	}
	if m.add_type != nil {
		fields = append(fields, media.FieldType)
	}
	if m.addstatus != nil {
		fields = append(fields, media.FieldStatus)
	}
	if m.addreason_type != nil {
		fields = append(fields, media.FieldReasonType)
	}
	if m.addout_user_id != nil {
		fields = append(fields, media.FieldOutUserID)
	}
	if m.addcompany_id != nil {
		fields = append(fields, media.FieldCompanyID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MediaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case media.FieldUserID:
		return m.AddedUserID()
	case media.FieldAppID:
		return m.AddedAppID()
	case media.FieldRefCount:
		return m.AddedRefCount()
	case media.FieldLevel:
		return m.AddedLevel()
	case media.FieldType:
		return m.AddedType()
	case media.FieldStatus:
		return m.AddedStatus()
	case media.FieldReasonType:
		return m.AddedReasonType()
	case media.FieldOutUserID:
		return m.AddedOutUserID()
	case media.FieldCompanyID:
		return m.AddedCompanyID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case media.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case media.FieldAppID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAppID(v)
		return nil
	case media.FieldRefCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRefCount(v)
		return nil
	case media.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	case media.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case media.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case media.FieldReasonType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReasonType(v)
		return nil
	case media.FieldOutUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOutUserID(v)
		return nil
	case media.FieldCompanyID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCompanyID(v)
		return nil
	}
	return fmt.Errorf("unknown Media numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MediaMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(media.FieldCreatedAt) {
		fields = append(fields, media.FieldCreatedAt)
	}
	if m.FieldCleared(media.FieldUpdatedAt) {
		fields = append(fields, media.FieldUpdatedAt)
	}
	if m.FieldCleared(media.FieldDeleteAt) {
		fields = append(fields, media.FieldDeleteAt)
	}
	if m.FieldCleared(media.FieldHash) {
		fields = append(fields, media.FieldHash)
	}
	if m.FieldCleared(media.FieldUserID) {
		fields = append(fields, media.FieldUserID)
	}
	if m.FieldCleared(media.FieldAppID) {
		fields = append(fields, media.FieldAppID)
	}
	if m.FieldCleared(media.FieldSn) {
		fields = append(fields, media.FieldSn)
	}
	if m.FieldCleared(media.FieldSize) {
		fields = append(fields, media.FieldSize)
	}
	if m.FieldCleared(media.FieldMime) {
		fields = append(fields, media.FieldMime)
	}
	if m.FieldCleared(media.FieldExt) {
		fields = append(fields, media.FieldExt)
	}
	if m.FieldCleared(media.FieldRefCount) {
		fields = append(fields, media.FieldRefCount)
	}
	if m.FieldCleared(media.FieldLevel) {
		fields = append(fields, media.FieldLevel)
	}
	if m.FieldCleared(media.FieldType) {
		fields = append(fields, media.FieldType)
	}
	if m.FieldCleared(media.FieldStatus) {
		fields = append(fields, media.FieldStatus)
	}
	if m.FieldCleared(media.FieldReasonType) {
		fields = append(fields, media.FieldReasonType)
	}
	if m.FieldCleared(media.FieldSavePath) {
		fields = append(fields, media.FieldSavePath)
	}
	if m.FieldCleared(media.FieldFullPath) {
		fields = append(fields, media.FieldFullPath)
	}
	if m.FieldCleared(media.FieldIsEncrypted) {
		fields = append(fields, media.FieldIsEncrypted)
	}
	if m.FieldCleared(media.FieldReason) {
		fields = append(fields, media.FieldReason)
	}
	if m.FieldCleared(media.FieldOutUserID) {
		fields = append(fields, media.FieldOutUserID)
	}
	if m.FieldCleared(media.FieldCompanyID) {
		fields = append(fields, media.FieldCompanyID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MediaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MediaMutation) ClearField(name string) error {
	switch name {
	case media.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case media.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case media.FieldDeleteAt:
		m.ClearDeleteAt()
		return nil
	case media.FieldHash:
		m.ClearHash()
		return nil
	case media.FieldUserID:
		m.ClearUserID()
		return nil
	case media.FieldAppID:
		m.ClearAppID()
		return nil
	case media.FieldSn:
		m.ClearSn()
		return nil
	case media.FieldSize:
		m.ClearSize()
		return nil
	case media.FieldMime:
		m.ClearMime()
		return nil
	case media.FieldExt:
		m.ClearExt()
		return nil
	case media.FieldRefCount:
		m.ClearRefCount()
		return nil
	case media.FieldLevel:
		m.ClearLevel()
		return nil
	case media.FieldType:
		m.ClearType()
		return nil
	case media.FieldStatus:
		m.ClearStatus()
		return nil
	case media.FieldReasonType:
		m.ClearReasonType()
		return nil
	case media.FieldSavePath:
		m.ClearSavePath()
		return nil
	case media.FieldFullPath:
		m.ClearFullPath()
		return nil
	case media.FieldIsEncrypted:
		m.ClearIsEncrypted()
		return nil
	case media.FieldReason:
		m.ClearReason()
		return nil
	case media.FieldOutUserID:
		m.ClearOutUserID()
		return nil
	case media.FieldCompanyID:
		m.ClearCompanyID()
		return nil
	}
	return fmt.Errorf("unknown Media nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MediaMutation) ResetField(name string) error {
	switch name {
	case media.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case media.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case media.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	case media.FieldHash:
		m.ResetHash()
		return nil
	case media.FieldUserID:
		m.ResetUserID()
		return nil
	case media.FieldAppID:
		m.ResetAppID()
		return nil
	case media.FieldSn:
		m.ResetSn()
		return nil
	case media.FieldOrgFileName:
		m.ResetOrgFileName()
		return nil
	case media.FieldFileName:
		m.ResetFileName()
		return nil
	case media.FieldSize:
		m.ResetSize()
		return nil
	case media.FieldMime:
		m.ResetMime()
		return nil
	case media.FieldExt:
		m.ResetExt()
		return nil
	case media.FieldRefCount:
		m.ResetRefCount()
		return nil
	case media.FieldLevel:
		m.ResetLevel()
		return nil
	case media.FieldType:
		m.ResetType()
		return nil
	case media.FieldStatus:
		m.ResetStatus()
		return nil
	case media.FieldReasonType:
		m.ResetReasonType()
		return nil
	case media.FieldSavePath:
		m.ResetSavePath()
		return nil
	case media.FieldFullPath:
		m.ResetFullPath()
		return nil
	case media.FieldIsEncrypted:
		m.ResetIsEncrypted()
		return nil
	case media.FieldReason:
		m.ResetReason()
		return nil
	case media.FieldOutUserID:
		m.ResetOutUserID()
		return nil
	case media.FieldCompanyID:
		m.ResetCompanyID()
		return nil
	}
	return fmt.Errorf("unknown Media field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MediaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MediaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MediaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MediaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MediaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MediaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MediaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Media unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MediaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Media edge %s", name)
}

// OperatorMutation represents an operation that mutates the Operator nodes in the graph.
type OperatorMutation struct {
	config
	op             Op
	typ            string
	id             *int
	created_at     *time.Time
	updated_at     *time.Time
	delete_at      *time.Time
	name           *string
	email          *string
	password       *string
	nickname       *string
	phone          *string
	avatar         *string
	remember_token *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Operator, error)
	predicates     []predicate.Operator
}

var _ ent.Mutation = (*OperatorMutation)(nil)

// operatorOption allows management of the mutation configuration using functional options.
type operatorOption func(*OperatorMutation)

// newOperatorMutation creates new mutation for the Operator entity.
func newOperatorMutation(c config, op Op, opts ...operatorOption) *OperatorMutation {
	m := &OperatorMutation{
		config:        c,
		op:            op,
		typ:           TypeOperator,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOperatorID sets the ID field of the mutation.
func withOperatorID(id int) operatorOption {
	return func(m *OperatorMutation) {
		var (
			err   error
			once  sync.Once
			value *Operator
		)
		m.oldValue = func(ctx context.Context) (*Operator, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Operator.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOperator sets the old Operator of the mutation.
func withOperator(node *Operator) operatorOption {
	return func(m *OperatorMutation) {
		m.oldValue = func(context.Context) (*Operator, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OperatorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OperatorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OperatorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OperatorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Operator.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OperatorMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OperatorMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *OperatorMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[operator.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *OperatorMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[operator.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OperatorMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, operator.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OperatorMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OperatorMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *OperatorMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[operator.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *OperatorMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[operator.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OperatorMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, operator.FieldUpdatedAt)
}

// SetDeleteAt sets the "delete_at" field.
func (m *OperatorMutation) SetDeleteAt(t time.Time) {
	m.delete_at = &t
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *OperatorMutation) DeleteAt() (r time.Time, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldDeleteAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (m *OperatorMutation) ClearDeleteAt() {
	m.delete_at = nil
	m.clearedFields[operator.FieldDeleteAt] = struct{}{}
}

// DeleteAtCleared returns if the "delete_at" field was cleared in this mutation.
func (m *OperatorMutation) DeleteAtCleared() bool {
	_, ok := m.clearedFields[operator.FieldDeleteAt]
	return ok
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *OperatorMutation) ResetDeleteAt() {
	m.delete_at = nil
	delete(m.clearedFields, operator.FieldDeleteAt)
}

// SetName sets the "name" field.
func (m *OperatorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OperatorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *OperatorMutation) ClearName() {
	m.name = nil
	m.clearedFields[operator.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *OperatorMutation) NameCleared() bool {
	_, ok := m.clearedFields[operator.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *OperatorMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, operator.FieldName)
}

// SetEmail sets the "email" field.
func (m *OperatorMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *OperatorMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *OperatorMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[operator.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *OperatorMutation) EmailCleared() bool {
	_, ok := m.clearedFields[operator.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *OperatorMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, operator.FieldEmail)
}

// SetPassword sets the "password" field.
func (m *OperatorMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *OperatorMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *OperatorMutation) ResetPassword() {
	m.password = nil
}

// SetNickname sets the "nickname" field.
func (m *OperatorMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *OperatorMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ClearNickname clears the value of the "nickname" field.
func (m *OperatorMutation) ClearNickname() {
	m.nickname = nil
	m.clearedFields[operator.FieldNickname] = struct{}{}
}

// NicknameCleared returns if the "nickname" field was cleared in this mutation.
func (m *OperatorMutation) NicknameCleared() bool {
	_, ok := m.clearedFields[operator.FieldNickname]
	return ok
}

// ResetNickname resets all changes to the "nickname" field.
func (m *OperatorMutation) ResetNickname() {
	m.nickname = nil
	delete(m.clearedFields, operator.FieldNickname)
}

// SetPhone sets the "phone" field.
func (m *OperatorMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *OperatorMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *OperatorMutation) ResetPhone() {
	m.phone = nil
}

// SetAvatar sets the "avatar" field.
func (m *OperatorMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *OperatorMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *OperatorMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[operator.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *OperatorMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[operator.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *OperatorMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, operator.FieldAvatar)
}

// SetRememberToken sets the "remember_token" field.
func (m *OperatorMutation) SetRememberToken(s string) {
	m.remember_token = &s
}

// RememberToken returns the value of the "remember_token" field in the mutation.
func (m *OperatorMutation) RememberToken() (r string, exists bool) {
	v := m.remember_token
	if v == nil {
		return
	}
	return *v, true
}

// OldRememberToken returns the old "remember_token" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldRememberToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRememberToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRememberToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRememberToken: %w", err)
	}
	return oldValue.RememberToken, nil
}

// ClearRememberToken clears the value of the "remember_token" field.
func (m *OperatorMutation) ClearRememberToken() {
	m.remember_token = nil
	m.clearedFields[operator.FieldRememberToken] = struct{}{}
}

// RememberTokenCleared returns if the "remember_token" field was cleared in this mutation.
func (m *OperatorMutation) RememberTokenCleared() bool {
	_, ok := m.clearedFields[operator.FieldRememberToken]
	return ok
}

// ResetRememberToken resets all changes to the "remember_token" field.
func (m *OperatorMutation) ResetRememberToken() {
	m.remember_token = nil
	delete(m.clearedFields, operator.FieldRememberToken)
}

// Where appends a list predicates to the OperatorMutation builder.
func (m *OperatorMutation) Where(ps ...predicate.Operator) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OperatorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Operator).
func (m *OperatorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OperatorMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, operator.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, operator.FieldUpdatedAt)
	}
	if m.delete_at != nil {
		fields = append(fields, operator.FieldDeleteAt)
	}
	if m.name != nil {
		fields = append(fields, operator.FieldName)
	}
	if m.email != nil {
		fields = append(fields, operator.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, operator.FieldPassword)
	}
	if m.nickname != nil {
		fields = append(fields, operator.FieldNickname)
	}
	if m.phone != nil {
		fields = append(fields, operator.FieldPhone)
	}
	if m.avatar != nil {
		fields = append(fields, operator.FieldAvatar)
	}
	if m.remember_token != nil {
		fields = append(fields, operator.FieldRememberToken)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OperatorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case operator.FieldCreatedAt:
		return m.CreatedAt()
	case operator.FieldUpdatedAt:
		return m.UpdatedAt()
	case operator.FieldDeleteAt:
		return m.DeleteAt()
	case operator.FieldName:
		return m.Name()
	case operator.FieldEmail:
		return m.Email()
	case operator.FieldPassword:
		return m.Password()
	case operator.FieldNickname:
		return m.Nickname()
	case operator.FieldPhone:
		return m.Phone()
	case operator.FieldAvatar:
		return m.Avatar()
	case operator.FieldRememberToken:
		return m.RememberToken()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OperatorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case operator.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case operator.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case operator.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	case operator.FieldName:
		return m.OldName(ctx)
	case operator.FieldEmail:
		return m.OldEmail(ctx)
	case operator.FieldPassword:
		return m.OldPassword(ctx)
	case operator.FieldNickname:
		return m.OldNickname(ctx)
	case operator.FieldPhone:
		return m.OldPhone(ctx)
	case operator.FieldAvatar:
		return m.OldAvatar(ctx)
	case operator.FieldRememberToken:
		return m.OldRememberToken(ctx)
	}
	return nil, fmt.Errorf("unknown Operator field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OperatorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case operator.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case operator.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case operator.FieldDeleteAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	case operator.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case operator.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case operator.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case operator.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case operator.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case operator.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case operator.FieldRememberToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRememberToken(v)
		return nil
	}
	return fmt.Errorf("unknown Operator field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OperatorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OperatorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OperatorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Operator numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OperatorMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(operator.FieldCreatedAt) {
		fields = append(fields, operator.FieldCreatedAt)
	}
	if m.FieldCleared(operator.FieldUpdatedAt) {
		fields = append(fields, operator.FieldUpdatedAt)
	}
	if m.FieldCleared(operator.FieldDeleteAt) {
		fields = append(fields, operator.FieldDeleteAt)
	}
	if m.FieldCleared(operator.FieldName) {
		fields = append(fields, operator.FieldName)
	}
	if m.FieldCleared(operator.FieldEmail) {
		fields = append(fields, operator.FieldEmail)
	}
	if m.FieldCleared(operator.FieldNickname) {
		fields = append(fields, operator.FieldNickname)
	}
	if m.FieldCleared(operator.FieldAvatar) {
		fields = append(fields, operator.FieldAvatar)
	}
	if m.FieldCleared(operator.FieldRememberToken) {
		fields = append(fields, operator.FieldRememberToken)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OperatorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OperatorMutation) ClearField(name string) error {
	switch name {
	case operator.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case operator.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case operator.FieldDeleteAt:
		m.ClearDeleteAt()
		return nil
	case operator.FieldName:
		m.ClearName()
		return nil
	case operator.FieldEmail:
		m.ClearEmail()
		return nil
	case operator.FieldNickname:
		m.ClearNickname()
		return nil
	case operator.FieldAvatar:
		m.ClearAvatar()
		return nil
	case operator.FieldRememberToken:
		m.ClearRememberToken()
		return nil
	}
	return fmt.Errorf("unknown Operator nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OperatorMutation) ResetField(name string) error {
	switch name {
	case operator.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case operator.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case operator.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	case operator.FieldName:
		m.ResetName()
		return nil
	case operator.FieldEmail:
		m.ResetEmail()
		return nil
	case operator.FieldPassword:
		m.ResetPassword()
		return nil
	case operator.FieldNickname:
		m.ResetNickname()
		return nil
	case operator.FieldPhone:
		m.ResetPhone()
		return nil
	case operator.FieldAvatar:
		m.ResetAvatar()
		return nil
	case operator.FieldRememberToken:
		m.ResetRememberToken()
		return nil
	}
	return fmt.Errorf("unknown Operator field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OperatorMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OperatorMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OperatorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OperatorMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OperatorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OperatorMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OperatorMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Operator unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OperatorMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Operator edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op             Op
	typ            string
	id             *int
	created_at     *time.Time
	updated_at     *time.Time
	delete_at      *time.Time
	company_id     *int
	addcompany_id  *int
	app_id         *int
	addapp_id      *int
	out_user_id    *int
	addout_user_id *int
	name           *string
	email          *string
	nickname       *string
	phone          *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*User, error)
	predicates     []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *UserMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[user.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *UserMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, user.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *UserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[user.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *UserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, user.FieldUpdatedAt)
}

// SetDeleteAt sets the "delete_at" field.
func (m *UserMutation) SetDeleteAt(t time.Time) {
	m.delete_at = &t
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *UserMutation) DeleteAt() (r time.Time, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeleteAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (m *UserMutation) ClearDeleteAt() {
	m.delete_at = nil
	m.clearedFields[user.FieldDeleteAt] = struct{}{}
}

// DeleteAtCleared returns if the "delete_at" field was cleared in this mutation.
func (m *UserMutation) DeleteAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeleteAt]
	return ok
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *UserMutation) ResetDeleteAt() {
	m.delete_at = nil
	delete(m.clearedFields, user.FieldDeleteAt)
}

// SetCompanyID sets the "company_id" field.
func (m *UserMutation) SetCompanyID(i int) {
	m.company_id = &i
	m.addcompany_id = nil
}

// CompanyID returns the value of the "company_id" field in the mutation.
func (m *UserMutation) CompanyID() (r int, exists bool) {
	v := m.company_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCompanyID returns the old "company_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCompanyID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompanyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompanyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompanyID: %w", err)
	}
	return oldValue.CompanyID, nil
}

// AddCompanyID adds i to the "company_id" field.
func (m *UserMutation) AddCompanyID(i int) {
	if m.addcompany_id != nil {
		*m.addcompany_id += i
	} else {
		m.addcompany_id = &i
	}
}

// AddedCompanyID returns the value that was added to the "company_id" field in this mutation.
func (m *UserMutation) AddedCompanyID() (r int, exists bool) {
	v := m.addcompany_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCompanyID clears the value of the "company_id" field.
func (m *UserMutation) ClearCompanyID() {
	m.company_id = nil
	m.addcompany_id = nil
	m.clearedFields[user.FieldCompanyID] = struct{}{}
}

// CompanyIDCleared returns if the "company_id" field was cleared in this mutation.
func (m *UserMutation) CompanyIDCleared() bool {
	_, ok := m.clearedFields[user.FieldCompanyID]
	return ok
}

// ResetCompanyID resets all changes to the "company_id" field.
func (m *UserMutation) ResetCompanyID() {
	m.company_id = nil
	m.addcompany_id = nil
	delete(m.clearedFields, user.FieldCompanyID)
}

// SetAppID sets the "app_id" field.
func (m *UserMutation) SetAppID(i int) {
	m.app_id = &i
	m.addapp_id = nil
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *UserMutation) AppID() (r int, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAppID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// AddAppID adds i to the "app_id" field.
func (m *UserMutation) AddAppID(i int) {
	if m.addapp_id != nil {
		*m.addapp_id += i
	} else {
		m.addapp_id = &i
	}
}

// AddedAppID returns the value that was added to the "app_id" field in this mutation.
func (m *UserMutation) AddedAppID() (r int, exists bool) {
	v := m.addapp_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearAppID clears the value of the "app_id" field.
func (m *UserMutation) ClearAppID() {
	m.app_id = nil
	m.addapp_id = nil
	m.clearedFields[user.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *UserMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[user.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *UserMutation) ResetAppID() {
	m.app_id = nil
	m.addapp_id = nil
	delete(m.clearedFields, user.FieldAppID)
}

// SetOutUserID sets the "out_user_id" field.
func (m *UserMutation) SetOutUserID(i int) {
	m.out_user_id = &i
	m.addout_user_id = nil
}

// OutUserID returns the value of the "out_user_id" field in the mutation.
func (m *UserMutation) OutUserID() (r int, exists bool) {
	v := m.out_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOutUserID returns the old "out_user_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldOutUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutUserID: %w", err)
	}
	return oldValue.OutUserID, nil
}

// AddOutUserID adds i to the "out_user_id" field.
func (m *UserMutation) AddOutUserID(i int) {
	if m.addout_user_id != nil {
		*m.addout_user_id += i
	} else {
		m.addout_user_id = &i
	}
}

// AddedOutUserID returns the value that was added to the "out_user_id" field in this mutation.
func (m *UserMutation) AddedOutUserID() (r int, exists bool) {
	v := m.addout_user_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOutUserID clears the value of the "out_user_id" field.
func (m *UserMutation) ClearOutUserID() {
	m.out_user_id = nil
	m.addout_user_id = nil
	m.clearedFields[user.FieldOutUserID] = struct{}{}
}

// OutUserIDCleared returns if the "out_user_id" field was cleared in this mutation.
func (m *UserMutation) OutUserIDCleared() bool {
	_, ok := m.clearedFields[user.FieldOutUserID]
	return ok
}

// ResetOutUserID resets all changes to the "out_user_id" field.
func (m *UserMutation) ResetOutUserID() {
	m.out_user_id = nil
	m.addout_user_id = nil
	delete(m.clearedFields, user.FieldOutUserID)
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *UserMutation) ClearName() {
	m.name = nil
	m.clearedFields[user.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *UserMutation) NameCleared() bool {
	_, ok := m.clearedFields[user.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, user.FieldName)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetNickname sets the "nickname" field.
func (m *UserMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *UserMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ClearNickname clears the value of the "nickname" field.
func (m *UserMutation) ClearNickname() {
	m.nickname = nil
	m.clearedFields[user.FieldNickname] = struct{}{}
}

// NicknameCleared returns if the "nickname" field was cleared in this mutation.
func (m *UserMutation) NicknameCleared() bool {
	_, ok := m.clearedFields[user.FieldNickname]
	return ok
}

// ResetNickname resets all changes to the "nickname" field.
func (m *UserMutation) ResetNickname() {
	m.nickname = nil
	delete(m.clearedFields, user.FieldNickname)
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.delete_at != nil {
		fields = append(fields, user.FieldDeleteAt)
	}
	if m.company_id != nil {
		fields = append(fields, user.FieldCompanyID)
	}
	if m.app_id != nil {
		fields = append(fields, user.FieldAppID)
	}
	if m.out_user_id != nil {
		fields = append(fields, user.FieldOutUserID)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.nickname != nil {
		fields = append(fields, user.FieldNickname)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeleteAt:
		return m.DeleteAt()
	case user.FieldCompanyID:
		return m.CompanyID()
	case user.FieldAppID:
		return m.AppID()
	case user.FieldOutUserID:
		return m.OutUserID()
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldNickname:
		return m.Nickname()
	case user.FieldPhone:
		return m.Phone()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	case user.FieldCompanyID:
		return m.OldCompanyID(ctx)
	case user.FieldAppID:
		return m.OldAppID(ctx)
	case user.FieldOutUserID:
		return m.OldOutUserID(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldNickname:
		return m.OldNickname(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeleteAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	case user.FieldCompanyID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompanyID(v)
		return nil
	case user.FieldAppID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case user.FieldOutUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutUserID(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addcompany_id != nil {
		fields = append(fields, user.FieldCompanyID)
	}
	if m.addapp_id != nil {
		fields = append(fields, user.FieldAppID)
	}
	if m.addout_user_id != nil {
		fields = append(fields, user.FieldOutUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCompanyID:
		return m.AddedCompanyID()
	case user.FieldAppID:
		return m.AddedAppID()
	case user.FieldOutUserID:
		return m.AddedOutUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldCompanyID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCompanyID(v)
		return nil
	case user.FieldAppID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAppID(v)
		return nil
	case user.FieldOutUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOutUserID(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldCreatedAt) {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.FieldCleared(user.FieldUpdatedAt) {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.FieldCleared(user.FieldDeleteAt) {
		fields = append(fields, user.FieldDeleteAt)
	}
	if m.FieldCleared(user.FieldCompanyID) {
		fields = append(fields, user.FieldCompanyID)
	}
	if m.FieldCleared(user.FieldAppID) {
		fields = append(fields, user.FieldAppID)
	}
	if m.FieldCleared(user.FieldOutUserID) {
		fields = append(fields, user.FieldOutUserID)
	}
	if m.FieldCleared(user.FieldName) {
		fields = append(fields, user.FieldName)
	}
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	if m.FieldCleared(user.FieldNickname) {
		fields = append(fields, user.FieldNickname)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case user.FieldDeleteAt:
		m.ClearDeleteAt()
		return nil
	case user.FieldCompanyID:
		m.ClearCompanyID()
		return nil
	case user.FieldAppID:
		m.ClearAppID()
		return nil
	case user.FieldOutUserID:
		m.ClearOutUserID()
		return nil
	case user.FieldName:
		m.ClearName()
		return nil
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	case user.FieldNickname:
		m.ClearNickname()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	case user.FieldCompanyID:
		m.ResetCompanyID()
		return nil
	case user.FieldAppID:
		m.ResetAppID()
		return nil
	case user.FieldOutUserID:
		m.ResetOutUserID()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldNickname:
		m.ResetNickname()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
