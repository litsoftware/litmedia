// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/litsoftware/litmedia/internal/ent/media"
	"github.com/litsoftware/litmedia/internal/ent/predicate"
	"github.com/litsoftware/litmedia/internal/ent/schema"
)

// MediaUpdate is the builder for updating Media entities.
type MediaUpdate struct {
	config
	hooks    []Hook
	mutation *MediaMutation
}

// Where appends a list predicates to the MediaUpdate builder.
func (mu *MediaUpdate) Where(ps ...predicate.Media) *MediaUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MediaUpdate) SetUpdatedAt(t time.Time) *MediaUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *MediaUpdate) ClearUpdatedAt() *MediaUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// SetDeleteAt sets the "delete_at" field.
func (mu *MediaUpdate) SetDeleteAt(t time.Time) *MediaUpdate {
	mu.mutation.SetDeleteAt(t)
	return mu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableDeleteAt(t *time.Time) *MediaUpdate {
	if t != nil {
		mu.SetDeleteAt(*t)
	}
	return mu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (mu *MediaUpdate) ClearDeleteAt() *MediaUpdate {
	mu.mutation.ClearDeleteAt()
	return mu
}

// SetHash sets the "hash" field.
func (mu *MediaUpdate) SetHash(s string) *MediaUpdate {
	mu.mutation.SetHash(s)
	return mu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableHash(s *string) *MediaUpdate {
	if s != nil {
		mu.SetHash(*s)
	}
	return mu
}

// ClearHash clears the value of the "hash" field.
func (mu *MediaUpdate) ClearHash() *MediaUpdate {
	mu.mutation.ClearHash()
	return mu
}

// SetUserID sets the "user_id" field.
func (mu *MediaUpdate) SetUserID(i int) *MediaUpdate {
	mu.mutation.ResetUserID()
	mu.mutation.SetUserID(i)
	return mu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableUserID(i *int) *MediaUpdate {
	if i != nil {
		mu.SetUserID(*i)
	}
	return mu
}

// AddUserID adds i to the "user_id" field.
func (mu *MediaUpdate) AddUserID(i int) *MediaUpdate {
	mu.mutation.AddUserID(i)
	return mu
}

// ClearUserID clears the value of the "user_id" field.
func (mu *MediaUpdate) ClearUserID() *MediaUpdate {
	mu.mutation.ClearUserID()
	return mu
}

// SetAppID sets the "app_id" field.
func (mu *MediaUpdate) SetAppID(i int) *MediaUpdate {
	mu.mutation.ResetAppID()
	mu.mutation.SetAppID(i)
	return mu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableAppID(i *int) *MediaUpdate {
	if i != nil {
		mu.SetAppID(*i)
	}
	return mu
}

// AddAppID adds i to the "app_id" field.
func (mu *MediaUpdate) AddAppID(i int) *MediaUpdate {
	mu.mutation.AddAppID(i)
	return mu
}

// ClearAppID clears the value of the "app_id" field.
func (mu *MediaUpdate) ClearAppID() *MediaUpdate {
	mu.mutation.ClearAppID()
	return mu
}

// SetSn sets the "sn" field.
func (mu *MediaUpdate) SetSn(s string) *MediaUpdate {
	mu.mutation.SetSn(s)
	return mu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableSn(s *string) *MediaUpdate {
	if s != nil {
		mu.SetSn(*s)
	}
	return mu
}

// ClearSn clears the value of the "sn" field.
func (mu *MediaUpdate) ClearSn() *MediaUpdate {
	mu.mutation.ClearSn()
	return mu
}

// SetOrgFileName sets the "org_file_name" field.
func (mu *MediaUpdate) SetOrgFileName(s string) *MediaUpdate {
	mu.mutation.SetOrgFileName(s)
	return mu
}

// SetFileName sets the "file_name" field.
func (mu *MediaUpdate) SetFileName(s string) *MediaUpdate {
	mu.mutation.SetFileName(s)
	return mu
}

// SetSize sets the "size" field.
func (mu *MediaUpdate) SetSize(ss schema.MediaSize) *MediaUpdate {
	mu.mutation.SetSize(ss)
	return mu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableSize(ss *schema.MediaSize) *MediaUpdate {
	if ss != nil {
		mu.SetSize(*ss)
	}
	return mu
}

// ClearSize clears the value of the "size" field.
func (mu *MediaUpdate) ClearSize() *MediaUpdate {
	mu.mutation.ClearSize()
	return mu
}

// SetMime sets the "mime" field.
func (mu *MediaUpdate) SetMime(s string) *MediaUpdate {
	mu.mutation.SetMime(s)
	return mu
}

// SetNillableMime sets the "mime" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableMime(s *string) *MediaUpdate {
	if s != nil {
		mu.SetMime(*s)
	}
	return mu
}

// ClearMime clears the value of the "mime" field.
func (mu *MediaUpdate) ClearMime() *MediaUpdate {
	mu.mutation.ClearMime()
	return mu
}

// SetExt sets the "ext" field.
func (mu *MediaUpdate) SetExt(s string) *MediaUpdate {
	mu.mutation.SetExt(s)
	return mu
}

// SetNillableExt sets the "ext" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableExt(s *string) *MediaUpdate {
	if s != nil {
		mu.SetExt(*s)
	}
	return mu
}

// ClearExt clears the value of the "ext" field.
func (mu *MediaUpdate) ClearExt() *MediaUpdate {
	mu.mutation.ClearExt()
	return mu
}

// SetRefCount sets the "ref_count" field.
func (mu *MediaUpdate) SetRefCount(i int) *MediaUpdate {
	mu.mutation.ResetRefCount()
	mu.mutation.SetRefCount(i)
	return mu
}

// SetNillableRefCount sets the "ref_count" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableRefCount(i *int) *MediaUpdate {
	if i != nil {
		mu.SetRefCount(*i)
	}
	return mu
}

// AddRefCount adds i to the "ref_count" field.
func (mu *MediaUpdate) AddRefCount(i int) *MediaUpdate {
	mu.mutation.AddRefCount(i)
	return mu
}

// ClearRefCount clears the value of the "ref_count" field.
func (mu *MediaUpdate) ClearRefCount() *MediaUpdate {
	mu.mutation.ClearRefCount()
	return mu
}

// SetLevel sets the "level" field.
func (mu *MediaUpdate) SetLevel(i int) *MediaUpdate {
	mu.mutation.ResetLevel()
	mu.mutation.SetLevel(i)
	return mu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableLevel(i *int) *MediaUpdate {
	if i != nil {
		mu.SetLevel(*i)
	}
	return mu
}

// AddLevel adds i to the "level" field.
func (mu *MediaUpdate) AddLevel(i int) *MediaUpdate {
	mu.mutation.AddLevel(i)
	return mu
}

// ClearLevel clears the value of the "level" field.
func (mu *MediaUpdate) ClearLevel() *MediaUpdate {
	mu.mutation.ClearLevel()
	return mu
}

// SetType sets the "type" field.
func (mu *MediaUpdate) SetType(i int) *MediaUpdate {
	mu.mutation.ResetType()
	mu.mutation.SetType(i)
	return mu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableType(i *int) *MediaUpdate {
	if i != nil {
		mu.SetType(*i)
	}
	return mu
}

// AddType adds i to the "type" field.
func (mu *MediaUpdate) AddType(i int) *MediaUpdate {
	mu.mutation.AddType(i)
	return mu
}

// ClearType clears the value of the "type" field.
func (mu *MediaUpdate) ClearType() *MediaUpdate {
	mu.mutation.ClearType()
	return mu
}

// SetStatus sets the "status" field.
func (mu *MediaUpdate) SetStatus(i int) *MediaUpdate {
	mu.mutation.ResetStatus()
	mu.mutation.SetStatus(i)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableStatus(i *int) *MediaUpdate {
	if i != nil {
		mu.SetStatus(*i)
	}
	return mu
}

// AddStatus adds i to the "status" field.
func (mu *MediaUpdate) AddStatus(i int) *MediaUpdate {
	mu.mutation.AddStatus(i)
	return mu
}

// ClearStatus clears the value of the "status" field.
func (mu *MediaUpdate) ClearStatus() *MediaUpdate {
	mu.mutation.ClearStatus()
	return mu
}

// SetReasonType sets the "reason_type" field.
func (mu *MediaUpdate) SetReasonType(i int) *MediaUpdate {
	mu.mutation.ResetReasonType()
	mu.mutation.SetReasonType(i)
	return mu
}

// SetNillableReasonType sets the "reason_type" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableReasonType(i *int) *MediaUpdate {
	if i != nil {
		mu.SetReasonType(*i)
	}
	return mu
}

// AddReasonType adds i to the "reason_type" field.
func (mu *MediaUpdate) AddReasonType(i int) *MediaUpdate {
	mu.mutation.AddReasonType(i)
	return mu
}

// ClearReasonType clears the value of the "reason_type" field.
func (mu *MediaUpdate) ClearReasonType() *MediaUpdate {
	mu.mutation.ClearReasonType()
	return mu
}

// SetSavePath sets the "save_path" field.
func (mu *MediaUpdate) SetSavePath(s string) *MediaUpdate {
	mu.mutation.SetSavePath(s)
	return mu
}

// SetNillableSavePath sets the "save_path" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableSavePath(s *string) *MediaUpdate {
	if s != nil {
		mu.SetSavePath(*s)
	}
	return mu
}

// ClearSavePath clears the value of the "save_path" field.
func (mu *MediaUpdate) ClearSavePath() *MediaUpdate {
	mu.mutation.ClearSavePath()
	return mu
}

// SetFullPath sets the "full_path" field.
func (mu *MediaUpdate) SetFullPath(s string) *MediaUpdate {
	mu.mutation.SetFullPath(s)
	return mu
}

// SetNillableFullPath sets the "full_path" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableFullPath(s *string) *MediaUpdate {
	if s != nil {
		mu.SetFullPath(*s)
	}
	return mu
}

// ClearFullPath clears the value of the "full_path" field.
func (mu *MediaUpdate) ClearFullPath() *MediaUpdate {
	mu.mutation.ClearFullPath()
	return mu
}

// SetIsEncrypted sets the "is_encrypted" field.
func (mu *MediaUpdate) SetIsEncrypted(b bool) *MediaUpdate {
	mu.mutation.SetIsEncrypted(b)
	return mu
}

// SetNillableIsEncrypted sets the "is_encrypted" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableIsEncrypted(b *bool) *MediaUpdate {
	if b != nil {
		mu.SetIsEncrypted(*b)
	}
	return mu
}

// ClearIsEncrypted clears the value of the "is_encrypted" field.
func (mu *MediaUpdate) ClearIsEncrypted() *MediaUpdate {
	mu.mutation.ClearIsEncrypted()
	return mu
}

// SetReason sets the "reason" field.
func (mu *MediaUpdate) SetReason(s string) *MediaUpdate {
	mu.mutation.SetReason(s)
	return mu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableReason(s *string) *MediaUpdate {
	if s != nil {
		mu.SetReason(*s)
	}
	return mu
}

// ClearReason clears the value of the "reason" field.
func (mu *MediaUpdate) ClearReason() *MediaUpdate {
	mu.mutation.ClearReason()
	return mu
}

// SetOutUserID sets the "out_user_id" field.
func (mu *MediaUpdate) SetOutUserID(i int64) *MediaUpdate {
	mu.mutation.ResetOutUserID()
	mu.mutation.SetOutUserID(i)
	return mu
}

// SetNillableOutUserID sets the "out_user_id" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableOutUserID(i *int64) *MediaUpdate {
	if i != nil {
		mu.SetOutUserID(*i)
	}
	return mu
}

// AddOutUserID adds i to the "out_user_id" field.
func (mu *MediaUpdate) AddOutUserID(i int64) *MediaUpdate {
	mu.mutation.AddOutUserID(i)
	return mu
}

// ClearOutUserID clears the value of the "out_user_id" field.
func (mu *MediaUpdate) ClearOutUserID() *MediaUpdate {
	mu.mutation.ClearOutUserID()
	return mu
}

// SetCompanyID sets the "company_id" field.
func (mu *MediaUpdate) SetCompanyID(i int64) *MediaUpdate {
	mu.mutation.ResetCompanyID()
	mu.mutation.SetCompanyID(i)
	return mu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableCompanyID(i *int64) *MediaUpdate {
	if i != nil {
		mu.SetCompanyID(*i)
	}
	return mu
}

// AddCompanyID adds i to the "company_id" field.
func (mu *MediaUpdate) AddCompanyID(i int64) *MediaUpdate {
	mu.mutation.AddCompanyID(i)
	return mu
}

// ClearCompanyID clears the value of the "company_id" field.
func (mu *MediaUpdate) ClearCompanyID() *MediaUpdate {
	mu.mutation.ClearCompanyID()
	return mu
}

// Mutation returns the MediaMutation object of the builder.
func (mu *MediaUpdate) Mutation() *MediaMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MediaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MediaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MediaUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MediaUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MediaUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MediaUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok && !mu.mutation.UpdatedAtCleared() {
		v := media.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

func (mu *MediaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   media.Table,
			Columns: media.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: media.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: media.FieldCreatedAt,
		})
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: media.FieldUpdatedAt,
		})
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: media.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: media.FieldDeleteAt,
		})
	}
	if mu.mutation.DeleteAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: media.FieldDeleteAt,
		})
	}
	if value, ok := mu.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldHash,
		})
	}
	if mu.mutation.HashCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldHash,
		})
	}
	if value, ok := mu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldUserID,
		})
	}
	if value, ok := mu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldUserID,
		})
	}
	if mu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldUserID,
		})
	}
	if value, ok := mu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldAppID,
		})
	}
	if value, ok := mu.mutation.AddedAppID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldAppID,
		})
	}
	if mu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldAppID,
		})
	}
	if value, ok := mu.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldSn,
		})
	}
	if mu.mutation.SnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldSn,
		})
	}
	if value, ok := mu.mutation.OrgFileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldOrgFileName,
		})
	}
	if value, ok := mu.mutation.FileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldFileName,
		})
	}
	if value, ok := mu.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: media.FieldSize,
		})
	}
	if mu.mutation.SizeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: media.FieldSize,
		})
	}
	if value, ok := mu.mutation.Mime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldMime,
		})
	}
	if mu.mutation.MimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldMime,
		})
	}
	if value, ok := mu.mutation.Ext(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldExt,
		})
	}
	if mu.mutation.ExtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldExt,
		})
	}
	if value, ok := mu.mutation.RefCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldRefCount,
		})
	}
	if value, ok := mu.mutation.AddedRefCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldRefCount,
		})
	}
	if mu.mutation.RefCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldRefCount,
		})
	}
	if value, ok := mu.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldLevel,
		})
	}
	if value, ok := mu.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldLevel,
		})
	}
	if mu.mutation.LevelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldLevel,
		})
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldType,
		})
	}
	if value, ok := mu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldType,
		})
	}
	if mu.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldType,
		})
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldStatus,
		})
	}
	if value, ok := mu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldStatus,
		})
	}
	if mu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldStatus,
		})
	}
	if value, ok := mu.mutation.ReasonType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldReasonType,
		})
	}
	if value, ok := mu.mutation.AddedReasonType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldReasonType,
		})
	}
	if mu.mutation.ReasonTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldReasonType,
		})
	}
	if value, ok := mu.mutation.SavePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldSavePath,
		})
	}
	if mu.mutation.SavePathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldSavePath,
		})
	}
	if value, ok := mu.mutation.FullPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldFullPath,
		})
	}
	if mu.mutation.FullPathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldFullPath,
		})
	}
	if value, ok := mu.mutation.IsEncrypted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: media.FieldIsEncrypted,
		})
	}
	if mu.mutation.IsEncryptedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: media.FieldIsEncrypted,
		})
	}
	if value, ok := mu.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldReason,
		})
	}
	if mu.mutation.ReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldReason,
		})
	}
	if value, ok := mu.mutation.OutUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: media.FieldOutUserID,
		})
	}
	if value, ok := mu.mutation.AddedOutUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: media.FieldOutUserID,
		})
	}
	if mu.mutation.OutUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: media.FieldOutUserID,
		})
	}
	if value, ok := mu.mutation.CompanyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: media.FieldCompanyID,
		})
	}
	if value, ok := mu.mutation.AddedCompanyID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: media.FieldCompanyID,
		})
	}
	if mu.mutation.CompanyIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: media.FieldCompanyID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MediaUpdateOne is the builder for updating a single Media entity.
type MediaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MediaMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MediaUpdateOne) SetUpdatedAt(t time.Time) *MediaUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *MediaUpdateOne) ClearUpdatedAt() *MediaUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// SetDeleteAt sets the "delete_at" field.
func (muo *MediaUpdateOne) SetDeleteAt(t time.Time) *MediaUpdateOne {
	muo.mutation.SetDeleteAt(t)
	return muo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableDeleteAt(t *time.Time) *MediaUpdateOne {
	if t != nil {
		muo.SetDeleteAt(*t)
	}
	return muo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (muo *MediaUpdateOne) ClearDeleteAt() *MediaUpdateOne {
	muo.mutation.ClearDeleteAt()
	return muo
}

// SetHash sets the "hash" field.
func (muo *MediaUpdateOne) SetHash(s string) *MediaUpdateOne {
	muo.mutation.SetHash(s)
	return muo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableHash(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetHash(*s)
	}
	return muo
}

// ClearHash clears the value of the "hash" field.
func (muo *MediaUpdateOne) ClearHash() *MediaUpdateOne {
	muo.mutation.ClearHash()
	return muo
}

// SetUserID sets the "user_id" field.
func (muo *MediaUpdateOne) SetUserID(i int) *MediaUpdateOne {
	muo.mutation.ResetUserID()
	muo.mutation.SetUserID(i)
	return muo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableUserID(i *int) *MediaUpdateOne {
	if i != nil {
		muo.SetUserID(*i)
	}
	return muo
}

// AddUserID adds i to the "user_id" field.
func (muo *MediaUpdateOne) AddUserID(i int) *MediaUpdateOne {
	muo.mutation.AddUserID(i)
	return muo
}

// ClearUserID clears the value of the "user_id" field.
func (muo *MediaUpdateOne) ClearUserID() *MediaUpdateOne {
	muo.mutation.ClearUserID()
	return muo
}

// SetAppID sets the "app_id" field.
func (muo *MediaUpdateOne) SetAppID(i int) *MediaUpdateOne {
	muo.mutation.ResetAppID()
	muo.mutation.SetAppID(i)
	return muo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableAppID(i *int) *MediaUpdateOne {
	if i != nil {
		muo.SetAppID(*i)
	}
	return muo
}

// AddAppID adds i to the "app_id" field.
func (muo *MediaUpdateOne) AddAppID(i int) *MediaUpdateOne {
	muo.mutation.AddAppID(i)
	return muo
}

// ClearAppID clears the value of the "app_id" field.
func (muo *MediaUpdateOne) ClearAppID() *MediaUpdateOne {
	muo.mutation.ClearAppID()
	return muo
}

// SetSn sets the "sn" field.
func (muo *MediaUpdateOne) SetSn(s string) *MediaUpdateOne {
	muo.mutation.SetSn(s)
	return muo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableSn(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetSn(*s)
	}
	return muo
}

// ClearSn clears the value of the "sn" field.
func (muo *MediaUpdateOne) ClearSn() *MediaUpdateOne {
	muo.mutation.ClearSn()
	return muo
}

// SetOrgFileName sets the "org_file_name" field.
func (muo *MediaUpdateOne) SetOrgFileName(s string) *MediaUpdateOne {
	muo.mutation.SetOrgFileName(s)
	return muo
}

// SetFileName sets the "file_name" field.
func (muo *MediaUpdateOne) SetFileName(s string) *MediaUpdateOne {
	muo.mutation.SetFileName(s)
	return muo
}

// SetSize sets the "size" field.
func (muo *MediaUpdateOne) SetSize(ss schema.MediaSize) *MediaUpdateOne {
	muo.mutation.SetSize(ss)
	return muo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableSize(ss *schema.MediaSize) *MediaUpdateOne {
	if ss != nil {
		muo.SetSize(*ss)
	}
	return muo
}

// ClearSize clears the value of the "size" field.
func (muo *MediaUpdateOne) ClearSize() *MediaUpdateOne {
	muo.mutation.ClearSize()
	return muo
}

// SetMime sets the "mime" field.
func (muo *MediaUpdateOne) SetMime(s string) *MediaUpdateOne {
	muo.mutation.SetMime(s)
	return muo
}

// SetNillableMime sets the "mime" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableMime(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetMime(*s)
	}
	return muo
}

// ClearMime clears the value of the "mime" field.
func (muo *MediaUpdateOne) ClearMime() *MediaUpdateOne {
	muo.mutation.ClearMime()
	return muo
}

// SetExt sets the "ext" field.
func (muo *MediaUpdateOne) SetExt(s string) *MediaUpdateOne {
	muo.mutation.SetExt(s)
	return muo
}

// SetNillableExt sets the "ext" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableExt(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetExt(*s)
	}
	return muo
}

// ClearExt clears the value of the "ext" field.
func (muo *MediaUpdateOne) ClearExt() *MediaUpdateOne {
	muo.mutation.ClearExt()
	return muo
}

// SetRefCount sets the "ref_count" field.
func (muo *MediaUpdateOne) SetRefCount(i int) *MediaUpdateOne {
	muo.mutation.ResetRefCount()
	muo.mutation.SetRefCount(i)
	return muo
}

// SetNillableRefCount sets the "ref_count" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableRefCount(i *int) *MediaUpdateOne {
	if i != nil {
		muo.SetRefCount(*i)
	}
	return muo
}

// AddRefCount adds i to the "ref_count" field.
func (muo *MediaUpdateOne) AddRefCount(i int) *MediaUpdateOne {
	muo.mutation.AddRefCount(i)
	return muo
}

// ClearRefCount clears the value of the "ref_count" field.
func (muo *MediaUpdateOne) ClearRefCount() *MediaUpdateOne {
	muo.mutation.ClearRefCount()
	return muo
}

// SetLevel sets the "level" field.
func (muo *MediaUpdateOne) SetLevel(i int) *MediaUpdateOne {
	muo.mutation.ResetLevel()
	muo.mutation.SetLevel(i)
	return muo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableLevel(i *int) *MediaUpdateOne {
	if i != nil {
		muo.SetLevel(*i)
	}
	return muo
}

// AddLevel adds i to the "level" field.
func (muo *MediaUpdateOne) AddLevel(i int) *MediaUpdateOne {
	muo.mutation.AddLevel(i)
	return muo
}

// ClearLevel clears the value of the "level" field.
func (muo *MediaUpdateOne) ClearLevel() *MediaUpdateOne {
	muo.mutation.ClearLevel()
	return muo
}

// SetType sets the "type" field.
func (muo *MediaUpdateOne) SetType(i int) *MediaUpdateOne {
	muo.mutation.ResetType()
	muo.mutation.SetType(i)
	return muo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableType(i *int) *MediaUpdateOne {
	if i != nil {
		muo.SetType(*i)
	}
	return muo
}

// AddType adds i to the "type" field.
func (muo *MediaUpdateOne) AddType(i int) *MediaUpdateOne {
	muo.mutation.AddType(i)
	return muo
}

// ClearType clears the value of the "type" field.
func (muo *MediaUpdateOne) ClearType() *MediaUpdateOne {
	muo.mutation.ClearType()
	return muo
}

// SetStatus sets the "status" field.
func (muo *MediaUpdateOne) SetStatus(i int) *MediaUpdateOne {
	muo.mutation.ResetStatus()
	muo.mutation.SetStatus(i)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableStatus(i *int) *MediaUpdateOne {
	if i != nil {
		muo.SetStatus(*i)
	}
	return muo
}

// AddStatus adds i to the "status" field.
func (muo *MediaUpdateOne) AddStatus(i int) *MediaUpdateOne {
	muo.mutation.AddStatus(i)
	return muo
}

// ClearStatus clears the value of the "status" field.
func (muo *MediaUpdateOne) ClearStatus() *MediaUpdateOne {
	muo.mutation.ClearStatus()
	return muo
}

// SetReasonType sets the "reason_type" field.
func (muo *MediaUpdateOne) SetReasonType(i int) *MediaUpdateOne {
	muo.mutation.ResetReasonType()
	muo.mutation.SetReasonType(i)
	return muo
}

// SetNillableReasonType sets the "reason_type" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableReasonType(i *int) *MediaUpdateOne {
	if i != nil {
		muo.SetReasonType(*i)
	}
	return muo
}

// AddReasonType adds i to the "reason_type" field.
func (muo *MediaUpdateOne) AddReasonType(i int) *MediaUpdateOne {
	muo.mutation.AddReasonType(i)
	return muo
}

// ClearReasonType clears the value of the "reason_type" field.
func (muo *MediaUpdateOne) ClearReasonType() *MediaUpdateOne {
	muo.mutation.ClearReasonType()
	return muo
}

// SetSavePath sets the "save_path" field.
func (muo *MediaUpdateOne) SetSavePath(s string) *MediaUpdateOne {
	muo.mutation.SetSavePath(s)
	return muo
}

// SetNillableSavePath sets the "save_path" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableSavePath(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetSavePath(*s)
	}
	return muo
}

// ClearSavePath clears the value of the "save_path" field.
func (muo *MediaUpdateOne) ClearSavePath() *MediaUpdateOne {
	muo.mutation.ClearSavePath()
	return muo
}

// SetFullPath sets the "full_path" field.
func (muo *MediaUpdateOne) SetFullPath(s string) *MediaUpdateOne {
	muo.mutation.SetFullPath(s)
	return muo
}

// SetNillableFullPath sets the "full_path" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableFullPath(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetFullPath(*s)
	}
	return muo
}

// ClearFullPath clears the value of the "full_path" field.
func (muo *MediaUpdateOne) ClearFullPath() *MediaUpdateOne {
	muo.mutation.ClearFullPath()
	return muo
}

// SetIsEncrypted sets the "is_encrypted" field.
func (muo *MediaUpdateOne) SetIsEncrypted(b bool) *MediaUpdateOne {
	muo.mutation.SetIsEncrypted(b)
	return muo
}

// SetNillableIsEncrypted sets the "is_encrypted" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableIsEncrypted(b *bool) *MediaUpdateOne {
	if b != nil {
		muo.SetIsEncrypted(*b)
	}
	return muo
}

// ClearIsEncrypted clears the value of the "is_encrypted" field.
func (muo *MediaUpdateOne) ClearIsEncrypted() *MediaUpdateOne {
	muo.mutation.ClearIsEncrypted()
	return muo
}

// SetReason sets the "reason" field.
func (muo *MediaUpdateOne) SetReason(s string) *MediaUpdateOne {
	muo.mutation.SetReason(s)
	return muo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableReason(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetReason(*s)
	}
	return muo
}

// ClearReason clears the value of the "reason" field.
func (muo *MediaUpdateOne) ClearReason() *MediaUpdateOne {
	muo.mutation.ClearReason()
	return muo
}

// SetOutUserID sets the "out_user_id" field.
func (muo *MediaUpdateOne) SetOutUserID(i int64) *MediaUpdateOne {
	muo.mutation.ResetOutUserID()
	muo.mutation.SetOutUserID(i)
	return muo
}

// SetNillableOutUserID sets the "out_user_id" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableOutUserID(i *int64) *MediaUpdateOne {
	if i != nil {
		muo.SetOutUserID(*i)
	}
	return muo
}

// AddOutUserID adds i to the "out_user_id" field.
func (muo *MediaUpdateOne) AddOutUserID(i int64) *MediaUpdateOne {
	muo.mutation.AddOutUserID(i)
	return muo
}

// ClearOutUserID clears the value of the "out_user_id" field.
func (muo *MediaUpdateOne) ClearOutUserID() *MediaUpdateOne {
	muo.mutation.ClearOutUserID()
	return muo
}

// SetCompanyID sets the "company_id" field.
func (muo *MediaUpdateOne) SetCompanyID(i int64) *MediaUpdateOne {
	muo.mutation.ResetCompanyID()
	muo.mutation.SetCompanyID(i)
	return muo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableCompanyID(i *int64) *MediaUpdateOne {
	if i != nil {
		muo.SetCompanyID(*i)
	}
	return muo
}

// AddCompanyID adds i to the "company_id" field.
func (muo *MediaUpdateOne) AddCompanyID(i int64) *MediaUpdateOne {
	muo.mutation.AddCompanyID(i)
	return muo
}

// ClearCompanyID clears the value of the "company_id" field.
func (muo *MediaUpdateOne) ClearCompanyID() *MediaUpdateOne {
	muo.mutation.ClearCompanyID()
	return muo
}

// Mutation returns the MediaMutation object of the builder.
func (muo *MediaUpdateOne) Mutation() *MediaMutation {
	return muo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MediaUpdateOne) Select(field string, fields ...string) *MediaUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Media entity.
func (muo *MediaUpdateOne) Save(ctx context.Context) (*Media, error) {
	var (
		err  error
		node *Media
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MediaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MediaUpdateOne) SaveX(ctx context.Context) *Media {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MediaUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MediaUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MediaUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok && !muo.mutation.UpdatedAtCleared() {
		v := media.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

func (muo *MediaUpdateOne) sqlSave(ctx context.Context) (_node *Media, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   media.Table,
			Columns: media.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: media.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Media.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, media.FieldID)
		for _, f := range fields {
			if !media.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != media.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if muo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: media.FieldCreatedAt,
		})
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: media.FieldUpdatedAt,
		})
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: media.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: media.FieldDeleteAt,
		})
	}
	if muo.mutation.DeleteAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: media.FieldDeleteAt,
		})
	}
	if value, ok := muo.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldHash,
		})
	}
	if muo.mutation.HashCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldHash,
		})
	}
	if value, ok := muo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldUserID,
		})
	}
	if value, ok := muo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldUserID,
		})
	}
	if muo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldUserID,
		})
	}
	if value, ok := muo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldAppID,
		})
	}
	if value, ok := muo.mutation.AddedAppID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldAppID,
		})
	}
	if muo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldAppID,
		})
	}
	if value, ok := muo.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldSn,
		})
	}
	if muo.mutation.SnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldSn,
		})
	}
	if value, ok := muo.mutation.OrgFileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldOrgFileName,
		})
	}
	if value, ok := muo.mutation.FileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldFileName,
		})
	}
	if value, ok := muo.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: media.FieldSize,
		})
	}
	if muo.mutation.SizeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: media.FieldSize,
		})
	}
	if value, ok := muo.mutation.Mime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldMime,
		})
	}
	if muo.mutation.MimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldMime,
		})
	}
	if value, ok := muo.mutation.Ext(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldExt,
		})
	}
	if muo.mutation.ExtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldExt,
		})
	}
	if value, ok := muo.mutation.RefCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldRefCount,
		})
	}
	if value, ok := muo.mutation.AddedRefCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldRefCount,
		})
	}
	if muo.mutation.RefCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldRefCount,
		})
	}
	if value, ok := muo.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldLevel,
		})
	}
	if value, ok := muo.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldLevel,
		})
	}
	if muo.mutation.LevelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldLevel,
		})
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldType,
		})
	}
	if value, ok := muo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldType,
		})
	}
	if muo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldType,
		})
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldStatus,
		})
	}
	if value, ok := muo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldStatus,
		})
	}
	if muo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldStatus,
		})
	}
	if value, ok := muo.mutation.ReasonType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldReasonType,
		})
	}
	if value, ok := muo.mutation.AddedReasonType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldReasonType,
		})
	}
	if muo.mutation.ReasonTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: media.FieldReasonType,
		})
	}
	if value, ok := muo.mutation.SavePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldSavePath,
		})
	}
	if muo.mutation.SavePathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldSavePath,
		})
	}
	if value, ok := muo.mutation.FullPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldFullPath,
		})
	}
	if muo.mutation.FullPathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldFullPath,
		})
	}
	if value, ok := muo.mutation.IsEncrypted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: media.FieldIsEncrypted,
		})
	}
	if muo.mutation.IsEncryptedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: media.FieldIsEncrypted,
		})
	}
	if value, ok := muo.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldReason,
		})
	}
	if muo.mutation.ReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: media.FieldReason,
		})
	}
	if value, ok := muo.mutation.OutUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: media.FieldOutUserID,
		})
	}
	if value, ok := muo.mutation.AddedOutUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: media.FieldOutUserID,
		})
	}
	if muo.mutation.OutUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: media.FieldOutUserID,
		})
	}
	if value, ok := muo.mutation.CompanyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: media.FieldCompanyID,
		})
	}
	if value, ok := muo.mutation.AddedCompanyID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: media.FieldCompanyID,
		})
	}
	if muo.mutation.CompanyIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: media.FieldCompanyID,
		})
	}
	_node = &Media{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
