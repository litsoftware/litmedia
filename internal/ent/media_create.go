// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/litsoftware/litmedia/internal/ent/media"
	"github.com/litsoftware/litmedia/internal/ent/schema"
)

// MediaCreate is the builder for creating a Media entity.
type MediaCreate struct {
	config
	mutation *MediaMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mc *MediaCreate) SetCreatedAt(t time.Time) *MediaCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MediaCreate) SetNillableCreatedAt(t *time.Time) *MediaCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MediaCreate) SetUpdatedAt(t time.Time) *MediaCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MediaCreate) SetNillableUpdatedAt(t *time.Time) *MediaCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeleteAt sets the "delete_at" field.
func (mc *MediaCreate) SetDeleteAt(t time.Time) *MediaCreate {
	mc.mutation.SetDeleteAt(t)
	return mc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (mc *MediaCreate) SetNillableDeleteAt(t *time.Time) *MediaCreate {
	if t != nil {
		mc.SetDeleteAt(*t)
	}
	return mc
}

// SetHash sets the "hash" field.
func (mc *MediaCreate) SetHash(s string) *MediaCreate {
	mc.mutation.SetHash(s)
	return mc
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (mc *MediaCreate) SetNillableHash(s *string) *MediaCreate {
	if s != nil {
		mc.SetHash(*s)
	}
	return mc
}

// SetUserID sets the "user_id" field.
func (mc *MediaCreate) SetUserID(i int) *MediaCreate {
	mc.mutation.SetUserID(i)
	return mc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mc *MediaCreate) SetNillableUserID(i *int) *MediaCreate {
	if i != nil {
		mc.SetUserID(*i)
	}
	return mc
}

// SetAppID sets the "app_id" field.
func (mc *MediaCreate) SetAppID(i int) *MediaCreate {
	mc.mutation.SetAppID(i)
	return mc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (mc *MediaCreate) SetNillableAppID(i *int) *MediaCreate {
	if i != nil {
		mc.SetAppID(*i)
	}
	return mc
}

// SetSn sets the "sn" field.
func (mc *MediaCreate) SetSn(s string) *MediaCreate {
	mc.mutation.SetSn(s)
	return mc
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (mc *MediaCreate) SetNillableSn(s *string) *MediaCreate {
	if s != nil {
		mc.SetSn(*s)
	}
	return mc
}

// SetOrgFileName sets the "org_file_name" field.
func (mc *MediaCreate) SetOrgFileName(s string) *MediaCreate {
	mc.mutation.SetOrgFileName(s)
	return mc
}

// SetFileName sets the "file_name" field.
func (mc *MediaCreate) SetFileName(s string) *MediaCreate {
	mc.mutation.SetFileName(s)
	return mc
}

// SetSize sets the "size" field.
func (mc *MediaCreate) SetSize(ss schema.MediaSize) *MediaCreate {
	mc.mutation.SetSize(ss)
	return mc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (mc *MediaCreate) SetNillableSize(ss *schema.MediaSize) *MediaCreate {
	if ss != nil {
		mc.SetSize(*ss)
	}
	return mc
}

// SetMime sets the "mime" field.
func (mc *MediaCreate) SetMime(s string) *MediaCreate {
	mc.mutation.SetMime(s)
	return mc
}

// SetNillableMime sets the "mime" field if the given value is not nil.
func (mc *MediaCreate) SetNillableMime(s *string) *MediaCreate {
	if s != nil {
		mc.SetMime(*s)
	}
	return mc
}

// SetExt sets the "ext" field.
func (mc *MediaCreate) SetExt(s string) *MediaCreate {
	mc.mutation.SetExt(s)
	return mc
}

// SetNillableExt sets the "ext" field if the given value is not nil.
func (mc *MediaCreate) SetNillableExt(s *string) *MediaCreate {
	if s != nil {
		mc.SetExt(*s)
	}
	return mc
}

// SetRefCount sets the "ref_count" field.
func (mc *MediaCreate) SetRefCount(i int) *MediaCreate {
	mc.mutation.SetRefCount(i)
	return mc
}

// SetNillableRefCount sets the "ref_count" field if the given value is not nil.
func (mc *MediaCreate) SetNillableRefCount(i *int) *MediaCreate {
	if i != nil {
		mc.SetRefCount(*i)
	}
	return mc
}

// SetLevel sets the "level" field.
func (mc *MediaCreate) SetLevel(i int) *MediaCreate {
	mc.mutation.SetLevel(i)
	return mc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (mc *MediaCreate) SetNillableLevel(i *int) *MediaCreate {
	if i != nil {
		mc.SetLevel(*i)
	}
	return mc
}

// SetType sets the "type" field.
func (mc *MediaCreate) SetType(i int) *MediaCreate {
	mc.mutation.SetType(i)
	return mc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mc *MediaCreate) SetNillableType(i *int) *MediaCreate {
	if i != nil {
		mc.SetType(*i)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MediaCreate) SetStatus(i int) *MediaCreate {
	mc.mutation.SetStatus(i)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MediaCreate) SetNillableStatus(i *int) *MediaCreate {
	if i != nil {
		mc.SetStatus(*i)
	}
	return mc
}

// SetReasonType sets the "reason_type" field.
func (mc *MediaCreate) SetReasonType(i int) *MediaCreate {
	mc.mutation.SetReasonType(i)
	return mc
}

// SetNillableReasonType sets the "reason_type" field if the given value is not nil.
func (mc *MediaCreate) SetNillableReasonType(i *int) *MediaCreate {
	if i != nil {
		mc.SetReasonType(*i)
	}
	return mc
}

// SetSavePath sets the "save_path" field.
func (mc *MediaCreate) SetSavePath(s string) *MediaCreate {
	mc.mutation.SetSavePath(s)
	return mc
}

// SetNillableSavePath sets the "save_path" field if the given value is not nil.
func (mc *MediaCreate) SetNillableSavePath(s *string) *MediaCreate {
	if s != nil {
		mc.SetSavePath(*s)
	}
	return mc
}

// SetFullPath sets the "full_path" field.
func (mc *MediaCreate) SetFullPath(s string) *MediaCreate {
	mc.mutation.SetFullPath(s)
	return mc
}

// SetNillableFullPath sets the "full_path" field if the given value is not nil.
func (mc *MediaCreate) SetNillableFullPath(s *string) *MediaCreate {
	if s != nil {
		mc.SetFullPath(*s)
	}
	return mc
}

// SetIsEncrypted sets the "is_encrypted" field.
func (mc *MediaCreate) SetIsEncrypted(b bool) *MediaCreate {
	mc.mutation.SetIsEncrypted(b)
	return mc
}

// SetNillableIsEncrypted sets the "is_encrypted" field if the given value is not nil.
func (mc *MediaCreate) SetNillableIsEncrypted(b *bool) *MediaCreate {
	if b != nil {
		mc.SetIsEncrypted(*b)
	}
	return mc
}

// SetReason sets the "reason" field.
func (mc *MediaCreate) SetReason(s string) *MediaCreate {
	mc.mutation.SetReason(s)
	return mc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (mc *MediaCreate) SetNillableReason(s *string) *MediaCreate {
	if s != nil {
		mc.SetReason(*s)
	}
	return mc
}

// SetOutUserID sets the "out_user_id" field.
func (mc *MediaCreate) SetOutUserID(i int64) *MediaCreate {
	mc.mutation.SetOutUserID(i)
	return mc
}

// SetNillableOutUserID sets the "out_user_id" field if the given value is not nil.
func (mc *MediaCreate) SetNillableOutUserID(i *int64) *MediaCreate {
	if i != nil {
		mc.SetOutUserID(*i)
	}
	return mc
}

// SetCompanyID sets the "company_id" field.
func (mc *MediaCreate) SetCompanyID(i int64) *MediaCreate {
	mc.mutation.SetCompanyID(i)
	return mc
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (mc *MediaCreate) SetNillableCompanyID(i *int64) *MediaCreate {
	if i != nil {
		mc.SetCompanyID(*i)
	}
	return mc
}

// Mutation returns the MediaMutation object of the builder.
func (mc *MediaCreate) Mutation() *MediaMutation {
	return mc.mutation
}

// Save creates the Media in the database.
func (mc *MediaCreate) Save(ctx context.Context) (*Media, error) {
	var (
		err  error
		node *Media
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MediaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MediaCreate) SaveX(ctx context.Context) *Media {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MediaCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MediaCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MediaCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := media.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := media.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.RefCount(); !ok {
		v := media.DefaultRefCount
		mc.mutation.SetRefCount(v)
	}
	if _, ok := mc.mutation.Level(); !ok {
		v := media.DefaultLevel
		mc.mutation.SetLevel(v)
	}
	if _, ok := mc.mutation.GetType(); !ok {
		v := media.DefaultType
		mc.mutation.SetType(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := media.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.ReasonType(); !ok {
		v := media.DefaultReasonType
		mc.mutation.SetReasonType(v)
	}
	if _, ok := mc.mutation.IsEncrypted(); !ok {
		v := media.DefaultIsEncrypted
		mc.mutation.SetIsEncrypted(v)
	}
	if _, ok := mc.mutation.Reason(); !ok {
		v := media.DefaultReason
		mc.mutation.SetReason(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MediaCreate) check() error {
	if _, ok := mc.mutation.OrgFileName(); !ok {
		return &ValidationError{Name: "org_file_name", err: errors.New(`ent: missing required field "Media.org_file_name"`)}
	}
	if _, ok := mc.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`ent: missing required field "Media.file_name"`)}
	}
	return nil
}

func (mc *MediaCreate) sqlSave(ctx context.Context) (*Media, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MediaCreate) createSpec() (*Media, *sqlgraph.CreateSpec) {
	var (
		_node = &Media{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: media.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: media.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: media.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: media.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: media.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	if value, ok := mc.mutation.Hash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldHash,
		})
		_node.Hash = value
	}
	if value, ok := mc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := mc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := mc.mutation.Sn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldSn,
		})
		_node.Sn = value
	}
	if value, ok := mc.mutation.OrgFileName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldOrgFileName,
		})
		_node.OrgFileName = value
	}
	if value, ok := mc.mutation.FileName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldFileName,
		})
		_node.FileName = value
	}
	if value, ok := mc.mutation.Size(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: media.FieldSize,
		})
		_node.Size = value
	}
	if value, ok := mc.mutation.Mime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldMime,
		})
		_node.Mime = value
	}
	if value, ok := mc.mutation.Ext(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldExt,
		})
		_node.Ext = value
	}
	if value, ok := mc.mutation.RefCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldRefCount,
		})
		_node.RefCount = value
	}
	if value, ok := mc.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldLevel,
		})
		_node.Level = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldType,
		})
		_node.Type = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := mc.mutation.ReasonType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: media.FieldReasonType,
		})
		_node.ReasonType = value
	}
	if value, ok := mc.mutation.SavePath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldSavePath,
		})
		_node.SavePath = value
	}
	if value, ok := mc.mutation.FullPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldFullPath,
		})
		_node.FullPath = value
	}
	if value, ok := mc.mutation.IsEncrypted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: media.FieldIsEncrypted,
		})
		_node.IsEncrypted = value
	}
	if value, ok := mc.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldReason,
		})
		_node.Reason = value
	}
	if value, ok := mc.mutation.OutUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: media.FieldOutUserID,
		})
		_node.OutUserID = value
	}
	if value, ok := mc.mutation.CompanyID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: media.FieldCompanyID,
		})
		_node.CompanyID = value
	}
	return _node, _spec
}

// MediaCreateBulk is the builder for creating many Media entities in bulk.
type MediaCreateBulk struct {
	config
	builders []*MediaCreate
}

// Save creates the Media entities in the database.
func (mcb *MediaCreateBulk) Save(ctx context.Context) ([]*Media, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Media, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MediaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MediaCreateBulk) SaveX(ctx context.Context) []*Media {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MediaCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MediaCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
