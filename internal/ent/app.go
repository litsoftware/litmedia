// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/litsoftware/litmedia/internal/ent/app"
)

// App is the model entity for the App schema.
type App struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt time.Time `json:"delete_at,omitempty"`
	// OperatorID holds the value of the "operator_id" field.
	OperatorID int `json:"operator_id,omitempty"`
	// EncryptedOperatorRsaPublicKey holds the value of the "encrypted_operator_rsa_public_key" field.
	// 用户公钥（operator上传)
	EncryptedOperatorRsaPublicKey string `json:"encrypted_operator_rsa_public_key,omitempty"`
	// EncryptedAppPrivateKey holds the value of the "encrypted_app_private_key" field.
	// 本平台为当前应用生成的应用私钥
	EncryptedAppPrivateKey string `json:"encrypted_app_private_key,omitempty"`
	// EncryptedAppPublicKey holds the value of the "encrypted_app_public_key" field.
	// 本平台为当前应用生成的应用公钥
	EncryptedAppPublicKey string `json:"encrypted_app_public_key,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Conf holds the value of the "conf" field.
	// 使用的配置名称
	Conf string `json:"conf,omitempty"`
	// AppID holds the value of the "app_id" field.
	// 应用id
	AppID string `json:"app_id,omitempty"`
	// AppSecret holds the value of the "app_secret" field.
	// 应用密钥
	AppSecret string `json:"app_secret,omitempty"`
	// Status holds the value of the "status" field.
	// 是否启用。 0： 未设置， 1： 启用， 2：不启用
	Status int `json:"status,omitempty"`
	// IPWhitelist holds the value of the "ip_whitelist" field.
	// 允许发起支付的ip白名单
	IPWhitelist []map[string]interface{} `json:"ip_whitelist,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*App) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case app.FieldIPWhitelist:
			values[i] = new([]byte)
		case app.FieldID, app.FieldOperatorID, app.FieldStatus:
			values[i] = new(sql.NullInt64)
		case app.FieldEncryptedOperatorRsaPublicKey, app.FieldEncryptedAppPrivateKey, app.FieldEncryptedAppPublicKey, app.FieldTitle, app.FieldDescription, app.FieldConf, app.FieldAppID, app.FieldAppSecret:
			values[i] = new(sql.NullString)
		case app.FieldCreatedAt, app.FieldUpdatedAt, app.FieldDeleteAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type App", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the App fields.
func (a *App) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case app.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case app.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case app.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case app.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				a.DeleteAt = value.Time
			}
		case app.FieldOperatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operator_id", values[i])
			} else if value.Valid {
				a.OperatorID = int(value.Int64)
			}
		case app.FieldEncryptedOperatorRsaPublicKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field encrypted_operator_rsa_public_key", values[i])
			} else if value.Valid {
				a.EncryptedOperatorRsaPublicKey = value.String
			}
		case app.FieldEncryptedAppPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field encrypted_app_private_key", values[i])
			} else if value.Valid {
				a.EncryptedAppPrivateKey = value.String
			}
		case app.FieldEncryptedAppPublicKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field encrypted_app_public_key", values[i])
			} else if value.Valid {
				a.EncryptedAppPublicKey = value.String
			}
		case app.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case app.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case app.FieldConf:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field conf", values[i])
			} else if value.Valid {
				a.Conf = value.String
			}
		case app.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				a.AppID = value.String
			}
		case app.FieldAppSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_secret", values[i])
			} else if value.Valid {
				a.AppSecret = value.String
			}
		case app.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = int(value.Int64)
			}
		case app.FieldIPWhitelist:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ip_whitelist", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.IPWhitelist); err != nil {
					return fmt.Errorf("unmarshal field ip_whitelist: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this App.
// Note that you need to call App.Unwrap() before calling this method if this App
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *App) Update() *AppUpdateOne {
	return (&AppClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the App entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *App) Unwrap() *App {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: App is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *App) String() string {
	var builder strings.Builder
	builder.WriteString("App(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", delete_at=")
	builder.WriteString(a.DeleteAt.Format(time.ANSIC))
	builder.WriteString(", operator_id=")
	builder.WriteString(fmt.Sprintf("%v", a.OperatorID))
	builder.WriteString(", encrypted_operator_rsa_public_key=")
	builder.WriteString(a.EncryptedOperatorRsaPublicKey)
	builder.WriteString(", encrypted_app_private_key=")
	builder.WriteString(a.EncryptedAppPrivateKey)
	builder.WriteString(", encrypted_app_public_key=")
	builder.WriteString(a.EncryptedAppPublicKey)
	builder.WriteString(", title=")
	builder.WriteString(a.Title)
	builder.WriteString(", description=")
	builder.WriteString(a.Description)
	builder.WriteString(", conf=")
	builder.WriteString(a.Conf)
	builder.WriteString(", app_id=")
	builder.WriteString(a.AppID)
	builder.WriteString(", app_secret=")
	builder.WriteString(a.AppSecret)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", ip_whitelist=")
	builder.WriteString(fmt.Sprintf("%v", a.IPWhitelist))
	builder.WriteByte(')')
	return builder.String()
}

// Apps is a parsable slice of App.
type Apps []*App

func (a Apps) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
